<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo-跨域方法]]></title>
    <url>%2F2021%2F01%2F27%2Fhexo-%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[hexo 跨域方法案例demo 1.安装http-proxy-middleware：1npm install --save-dev http-proxy-middleware 2.新增文件 themes/landscape/scripts/http_proxy_middleware.js:1234567891011121314const &#123; createProxyMiddleware &#125; = require('http-proxy-middleware');const apiProxy = createProxyMiddleware('/api', &#123; target: 'http://baidu.com', changeOrigin: true, pathRewrite: &#123; '^/api/': '/', // rewrite path 将链接中的 /api/ 替换为 '/' &#125;,&#125;);hexo.extend.filter.register('server_middleware', function(app)&#123; // 表示以 api 开头的请求将被转发 app.use('/api', apiProxy);&#125;); 3.重启项目即可hexo server，出现以下信息表示配置成功：12[HPM] Proxy created: /api -&gt; http://baidu.com[HPM] Proxy rewrite rule created: "^/api/" ~&gt; "/"]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mixins.scss]]></title>
    <url>%2F2020%2F08%2F31%2Fmixins-scss%2F</url>
    <content type="text"><![CDATA[mixins.scss123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203@mixin text-line-clamp($line: 2) &#123; overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: $line;&#125;@mixin glyphicon($mark) &#123; content: '#&#123;$mark&#125;'; font-family: 'Glyphicons Halflings';&#125;@mixin image-zoom() &#123; transition: all 0.4s ease-out; &amp;:hover &#123; transform: scale(1.15); &#125;&#125;@mixin object-fit() &#123; position: absolute; left: 0; top: 0; width: 100%; height: 100%; object-fit: cover; font-family: 'object-fit: cover;';&#125;// Safari image border-radius@mixin mask-image() &#123; -webkit-mask-image: -webkit-radial-gradient(white, black);&#125;@mixin readmore($color: $pink) &#123; color: $color; text-transform: uppercase; text-decoration: none; &amp;::after &#123; @include glyphicon('\e072'); display: inline-block; font-size: 12px; font-weight: 500; transition: padding .25s; transform: scale(.8); -webkit-transform: scale(.8); &#125; &amp;:hover::after, &amp;:focus::after, &amp;:active::after &#123; padding-left: 8px; &#125;&#125;@mixin position($pos:absolute,$top:0,$con:'',$w:100%,$h:100%)&#123; position: $pos; top: $top; content: $con; display: inline-block; width: $w; height: $h;&#125;@mixin change-color($normal: $primary-shade, $highlight: $primary-dark) &#123; color: $normal; &amp;:hover, &amp;:active &#123; color: $highlight; &#125;&#125;@mixin moveup() &#123; transform: translateY(-10px);&#125;@mixin add-shadow($x:4px, $y:6px, $width:8px, $color: rgba(0, 0, 0, .3)) &#123; box-shadow: $x $y $width $color;&#125;@mixin content-title &#123; font-size: 28px; font-weight: 900; letter-spacing: -0.02rem;&#125;@mixin page-title &#123; font-size: 32px; font-weight: 900; line-height: 40px; @media (max-width: 1200px) &#123; font-size: 30px; line-height: 1.4; letter-spacing: -0.33px; &#125;&#125;@mixin flex($hov: space-between, $col: center) &#123; display: flex; justify-content: $hov; align-items: $col;&#125;@mixin bgImg($w: 100%, $h: 100%, $img: "", $size: 100%) &#123; display: inline-block; width: $w; height: $h; background: url($img) no-repeat center; background-size: $size;&#125;@mixin bg-width-full($bg) &#123; background: $bg; position: relative; &amp;::before, &amp;::after &#123; @include position($w: 20%); left: -20%; background: $bg; &#125; &amp;::after &#123; right: -20%; left: auto; &#125;&#125;@mixin button($w: 189px, $h: 53px, $fcolor: #000, $bg: $ui-yellow,$h-bg: $dark-yellow,$fz: 16px) &#123; display: inline-block; width: $w; height: $h; line-height: $h; color: $fcolor; text-transform: uppercase; text-decoration: none; background: $bg; border-color: $bg; font-size: $fz; font-weight: bold; &amp;:hover &#123; background: $h-bg; border-color: $h-bg; &#125;&#125;@mixin down-arrow($color: $white, $deg: 45deg) &#123; border-right: 2px solid $color; border-bottom: 2px solid $color; transform: rotate($deg);&#125;@mixin hook-icon($color: $white, $deg: -45deg) &#123; border-left: 2px solid $color; border-bottom: 2px solid $color; transform: rotate($deg);&#125;@mixin circular($w, $h, $bg) &#123; display: inline-block; width: $w; height: $h; border-radius: 50%; background-color: $bg;&#125;@mixin input-text( $p: 10px, $h: 56px, $w: 100%, $br: 16px, $bg: $input-bg, $fs: 15px, $color: $dusk) &#123; box-sizing: border-box; padding: $p; border: none; border-radius: $br; background: none; background-color: $bg; width: $w; height: $h; outline: none; font-size: $fs; color: $color;&#125;@mixin select-arrow() &#123; background: $input-bg url(../images/select-arrow.png) no-repeat calc(100% - 16px) center; background-size: 18px auto;&#125;@mixin disabled-button &#123; background: #f5f5f5; border: 2px solid $disabled; color: $disabled; cursor: auto;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git reset --hard]]></title>
    <url>%2F2020%2F06%2F22%2Fgit-reset-hard%2F</url>
    <content type="text"><![CDATA[撤下上1次push提交,不留历史记录(记得备份)1231. git log 2. git reset --hard a517075c66cec4f44c336//回退到a517075c66cec4f44c336版本, 这一步之前一定要保存好文件，之后就什么都没有了3. git push origin feature/CITC-99 -f //强制push &lt;&gt; -f,不强推会冲突，推不上，必须强推 git reset –hard ID之后,本地文件清空找回方法(如果之前每次提交之前都有git stash的话，按以下步骤可以找回)12345671. git fsck --lost-found2. 找到“悬空 commit ID”，忽略“悬空 blob”，3. git show 7480ed4bba，从上到下，一个个ID找下去，直到找到文件为止4. 找到后，git merge 7480ed4bba, 退出5. git stash，再次备份文件，把文件重命名，使git reset --hard后不被丢失6. 再次git reset --hard 6bd3af08e008ff 恢复到撤消之前的代码，无影无踪；7. 手动把备份的文件恢复]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js 前端表单验证]]></title>
    <url>%2F2019%2F10%2F31%2Fjs-form-verification%2F</url>
    <content type="text"><![CDATA[e-mail格式123456function emailTest(obj) &#123; var myreg = /^([a-zA-Z0-9\-\.]+)@([a-zA-Z0-9\-\.]+)\.([a-zA-Z]&#123;2,5&#125;)$/; if (!myreg.test(obj)) &#123; return false; &#125;&#125; val is empty123function isValEmpty(obj) &#123; return obj.length == 0 ? false : true&#125; form-textarea1234function stripHTML(text) &#123; var regex = /(&lt;([^&gt;]+)&gt;)/ig; return text.replace(regex, "");&#125; form-checkbox123456789101112131415function checkboxVerification(checkbox) &#123; var $checkboxWrapper = checkbox.parents('.form-type-checkbox'); if(checkbox.is(':checked')) &#123; $checkboxWrapper.removeClass('empty-error'); $checkboxWrapper.find('.empty-error-message').remove(); &#125; else &#123; if(isRequired) &#123; isRequired = false; &#125; if(!$checkboxWrapper.hasClass('empty-error'))&#123; $checkboxWrapper.addClass('empty-error'); $checkboxWrapper.append("&lt;p class='empty-error-message'&gt;" + checkbox.attr('data-webform-required-error') + "&lt;/p&gt;"); &#125; &#125;&#125; form-email12345678910function emailVerification (email) &#123; if(emailTest(email.val()) == false) &#123; email.parent().addClass('empty-error'); if(isRequired) &#123; isRequired = false; &#125; &#125; else &#123; email.parent().removeClass('empty-error'); &#125;&#125; 验证123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263var isRequired;$('.form-textarea ').change(function () &#123; var textareaValue = $(this).val() $(this).val(stripHTML(textareaValue))&#125;);var requiredElement = "input[required]:not([type='radio']), select[required], textarea[required]";$form.find(requiredElement).each(function () &#123; var $this = $(this); if(!$this.parent().find('.empty-error-message').length &amp;&amp; $this.attr('type') !== 'checkbox')&#123; $this.parent().append("&lt;p class='empty-error-message'&gt;" + $this.attr('data-webform-required-error') + "&lt;/p&gt;"); &#125;&#125;);$form.find(requiredElement).bind('input propertychange', function () &#123;//propertychange 无意义 ，只为bind事件。 var $this = $(this); if (isValEmpty($this.val().trim())) &#123; if($this.attr('type') === 'email') &#123; emailVerification($this); &#125; else if($this.attr('type') === 'checkbox') &#123; checkboxVerification($this); &#125; else &#123; $this.parent().removeClass('empty-error'); &#125; &#125; else &#123; $this.parent().addClass('empty-error'); &#125;&#125;);submitBtn.on('click', function(e) &#123; isRequired = true; $form.find(requiredElement).each(function () &#123; var $this = $(this); if ($this.parent().is(":visible")) &#123; if (isValEmpty($this.val().trim()) == false) &#123; $this.parent().addClass('empty-error'); isRequired = false; &#125; else &#123; if($this.attr('type') === 'email') &#123; emailVerification($this); &#125; else if($this.attr('type') === 'checkbox') &#123; checkboxVerification($this); &#125; else &#123; $this.parent().removeClass('empty-error'); &#125; &#125; &#125; &#125;); if (isRequired == false) &#123; if ($('.empty-error-message:visible').length &gt; 0) &#123; var offsetTop = $(".empty-error-message:visible").eq(0).parent().offset().top - 60; $([document.documentElement, document.body]).animate(&#123; scrollTop: offsetTop &#125;, 250); &#125; return false &#125;&#125;);]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-world]]></title>
    <url>%2F2019%2F03%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start1234npm install 或：npm install -g hexo //全局安装hexohexo server //启动服务器//打开浏览器, 在地址栏输入http://localhost:4000（如果打不开，提示：localhost 意外终止了连接，//电脑端口被占用了，hexo server -p 5000，换成5000端口，果断可以访问 http://localhost:5000） More info: Server 部署网站需要的配置12345添加在_config.yml最后面:deploy: type:git repo: https://xmh.com/my/my.io.git/ //远程文件branch: master //远程分支 安装部署使用到的git插件.1npm install hexo-deployer-git --save 新建一篇文章123hexo new "My New Post"hexo new post CSS-ie6hexo new page CSS3-Grid.md 编辑模板12路径:hexo\source\_posts模板:例CSS-ie6.md More info: Writing 发表草稿1hexo publish [layout] &lt;filename&gt; 生成静态文件1hexo g More info: Generating 部署网站1234hexo d//如果在部署出现错误信息如果下: ERROR Deployer not found: git//需要安装git插件: npm install hexo-deployer-git --save//进行自动部署网站, 注意部署前需要重新生成网站hexo g, 每一次修改后都需要重新生成网站 More info: Deployment 清除缓存文件1hexo clean]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js 检测 touch 设备]]></title>
    <url>%2F2019%2F02%2F20%2Fjs-touch-device%2F</url>
    <content type="text"><![CDATA[检测 touch 设备123456789101112131415161718 var isPC, hClick='click'; if ('ontouchstart' in window) &#123; $('body').addClass('is-touch'); isPC = false; hClick = 'touchstart'; &#125; else &#123; $('body').addClass('no-touch'); isPC = true; &#125;$('.nav-tabs').once('.active').each(function () &#123; if (!isPC) &#123; $('.navbar-toggle').on(hClick, function() &#123; ...... &#125;) &#125;&#125;)]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分享 share]]></title>
    <url>%2F2018%2F12%2F20%2Fjs-share%2F</url>
    <content type="text"><![CDATA[share HTML 加copy12345678910&lt;div class="addtoany_list"&gt; &lt;div class="share-button"&gt;&lt;em&gt;&lt;/em&gt;&lt;span&gt;分享至&lt;/span&gt;&lt;/div&gt; &lt;div class="social-share" data-initialized="true"&gt; &lt;a class="social-share-icon icon-weibo" href="#"&gt;&amp;nbsp;&lt;/a&gt; &lt;a class="social-share-icon icon-wechat" href="#"&gt;&amp;nbsp;&lt;/a&gt; &lt;a class="social-share-icon icon-copy" href="javascript:"&gt;&amp;nbsp;&lt;/a&gt; &lt;div class="copy-success"&gt;复制成功&lt;/div&gt; &lt;div class="copy-error"&gt;请手动"复制"&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; share CSS1234567891011121314@import url("https://nspro.dev.ciandt.cn/sites/all/themes/custom/npro_master/css/share.min.css?pkoxsv");css文件夹同级放入fonts文件夹，icon字用的.social-share &#123; float: right; margin-bottom: 20px;&#125;.social-share .social-share-icon &#123; font-size: 0 !important; margin: 0 4px;&#125;.social-share .social-share-icon:before &#123; font-size: 20px;&#125; share JS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;script type="text/javascript" src="js/social-share.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/clipboard.min.js"&gt;&lt;/script&gt; function shareWechat() &#123; if ($('.addtoany_list').length)&#123; var $config = &#123; wechatQrcodeTitle : "微信扫一扫：分享", wechatQrcodeHelper : '&lt;p&gt;在微信中扫描二维码后&lt;/p&gt;&lt;p&gt;点击右上角的 ··· 分享&lt;/p&gt;' &#125;; &#125; &#125; function noClipboard () &#123; $('.copy-error').fadeIn('slow'); setTimeout(function()&#123; $('.copy-error').fadeOut('slow'); &#125;,2000); &#125; function shareCopyUrl()&#123; var clipBoardContent = window.location.href; if(ClipboardJS.isSupported()) &#123;//copy: clipboard Plugin var clipboard = new ClipboardJS('.icon-copy', &#123; text: function() &#123; return clipBoardContent; &#125; &#125;); clipboard.on('success', function(e) &#123; $('.copy-success').fadeIn('slow'); setTimeout(function()&#123; $('.copy-success').fadeOut('slow'); &#125;,2000); &#125;); clipboard.on('error', function(e) &#123; noClipboard(); &#125;); &#125; else &#123; $('.icon-copy').click(function(event) &#123; noClipboard(); &#125;); &#125; &#125; $(document).ready(function() &#123; shareCopyUrl(); &#125;); demo More info: demo,share.]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Multi-column Layout(CSS多列布局)]]></title>
    <url>%2F2018%2F11%2F15%2FCSS3-Columns%2F</url>
    <content type="text"><![CDATA[CSS Columns 是一种定义了多栏布局的模块，它能够表现出将内容在列之间怎么流动的以及间隙和分割线怎么使用。浏览器兼容性: IE10,IE10+More info: CSS Columns 12345678910111213141516171819202122. columns /* 3 30px */. column-count /* 最理想的分栏数目 */. column-width /* 每栏的最小宽度 */. column-rule /* 使用方法同border */. column-rule-width. column-rule-style. column-rule-color. column-gap /* 栏目之间的水平间隙 */. column-fill /* 定义栏目的高度是否统一 */. column-span /* all, none */column-count: 浏览器缩放保持设定数量的列column-width: 浏览器缩放不能容纳足够的列，列的数量会 -1，直至单列同时声明这两个属性时，column-count是最大列数，并且column-width是这些列的最小宽度。columns: 120px; /* column-width: 120px; column-count: auto */columns: auto 120px; /* column-width: 120px; column-count: auto */columns: 2; /* column-width: auto; column-count: 2 */columns: 2 auto; /* column-width: auto; column-count: 2 */columns: auto; /* column-width: auto; column-count: auto */columns: auto auto; /* column-width: auto; column-count: auto */ 三列布局(文字不间断,大标题横跨一整行):一个朋友和我讲的。他认识一个叫敖文，他弟弟叫敖轩。我的朋友好奇问，你弟弟为什么不叫敖武呢，这样文武双全多好呀！朋友回答，其实弟弟原来叫敖武，又一次晚上出去玩，已经到了吃饭的时间还不回家，所以妈妈就满村子的喊弟弟的名字，然后就给弟弟改名敖轩。我是大标题，横跨一整行一个朋友和我讲的。他认识一个叫敖文，他弟弟叫敖轩。我的朋友好奇问，你弟弟为什么不叫敖武呢，这样文武双全多好呀！朋友回答，其实弟弟原来叫敖武，又一次晚上出去玩，已经到了吃饭的时间还不回家，所以妈妈就满村子的喊弟弟的名字，然后就给弟弟改名敖轩。12345678910111213//column-rule设置分栏的样式 使用方式同border, 当宽度不够时会消失//column-gap设置分栏之间的水平间隙 默认为1em, font-size的值.css-columns3 &#123; columns: 3; column-rule: 1px solid #23a1c9; column-gap: 50px;&#125;.css-columns3 .columns-title &#123; column-span: all;//column-span有none和all两个值 text-align: center; padding: .5em;&#125; 古诗词,竖排文字:明月几时有？把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间？123456789.css-columns-vertical &#123; margin: 0 auto; columns: 1em; width: 90%; column-rule: dashed 1px #ccc; word-wrap: break-word; text-align: center; direction: rtl;&#125; 九宫格1234567891234567891011121314151617181920.css-columns-9 &#123; margin: 0 auto; columns: 3; width: 200px; text-align: center; border: solid 1px #23a1c9; padding: 10px 10px 0 10px;&#125;.css-columns-9 ul &#123; margin: 0; padding: 0; list-style: none;&#125;.css-columns-9 li &#123; margin-bottom: 10px; height: 50px; line-height: 50px; background: #23a1c9; color: #fff;&#125; 多列:contentcontentcontentcontentcontentcontentcontent123456.css-columns-multiple &#123; margin: 0 auto; columns: 90px; width: 300px; border: solid 1px #23a1c9;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6 学习笔记]]></title>
    <url>%2F2018%2F05%2F19%2FES6-study-notes%2F</url>
    <content type="text"><![CDATA[promisepromise: 承诺，许诺作用： 解决异步问题 (例如:用户登录-&gt;获取用户信息)传统方式，大部分用回调函数，事件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253let a = 10;let promise = new Promise(function(resolve,reject) &#123; //resolve 成功调用 //reject 失败调用 if(a == 0)&#123; resolve('成功'); &#125;else&#123; reject('失败'); &#125;&#125;);//1. promise.then(success,fail);promise.then(res=&gt;&#123; console.log(res);&#125;,err=&gt;&#123; console.log(err);&#125;);//fail的另一种方式promise.catch(err=&gt;&#123; console.log(err);&#125;)//2.将现有的东西,转成一个promise对象,resolve成功状态;// reject用法与resolve一样,一个成功状态,一个失败状态Promise.resolve('aa');等价于:new Promise(resolve=&gt;&#123; resolve('aa')&#125;)Promise.reject('aa');等价于:new Promise(reject=&gt;&#123; reject('aa')&#125;)//3.promise.all([p1,p2,p3]);把promise打包,扔到一个数组里面,打包完还是一个promise对象.// 必须确保,所有的promise对象,都是resolve状态,有一个reject就不行,必须都是成功状态.let p1 = Promise.resolve('aa');let p2 = Promise.reject('bb');//all对应: let p2 = Promise.resolve('bb');let p3 = Promise.resolve('cc');Promise.all([p1,p2,p3]).then(res=&gt;&#123; console.log(res); let[res1, res2, res3] = res; console.log(res1, res2, res3);&#125;)//4. promise.race([p1,p2,p3]):只要有一个成功状态,就返回Promise.race([p1,p2,p3]).then(res=&gt;&#123; console.log(res);&#125;) More info: promise 模块化12 Quick Start12 Quick Start12 Quick Start12 Quick Start12 Quick Start12 Quick Start12 Quick Start12 Quick Start12 More info: Server]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 Grid 布局]]></title>
    <url>%2F2017%2F12%2F05%2FCSS3-Grid%2F</url>
    <content type="text"><![CDATA[1、HTML 结构我们需要的第一件事是一点 HTML 。 一个网格容器（将变成一个网格元素）和网格项（header, menu, content, footer）。浏览器兼容性查询 123456&lt;div class="container"&gt; &lt;div class="header"&gt;HEADER&lt;/div&gt; &lt;div class="menu"&gt;MENU&lt;/div&gt; &lt;div class="content"&gt;CONTENT&lt;/div&gt; &lt;div class="footer"&gt;FOOTER&lt;/div&gt;&lt;/div&gt;## 2、设置基本的 CSS那么我们需要在 container 元素设置 display: grid; ，将其设置为网格容器，并指定我们需要多少行和列。这是基本的CSS： 123456.container &#123; display: grid; grid-template-columns: repeat(12, 1fr); grid-template-rows: 50px 350px 50px; grid-gap: 5px;&#125; 以上代码的意思是：使用 grid-template-columns 属性创建一个 12 列的网格，每个列都是一个单位宽度（总宽度的 1/12 ）。（愚人码头注：其中， repeat(12, 1fr) 意思是 12 个重复的 1fr 值。 fr 是网格容器剩余空间的等分单位。）使用 grid-template-rows 属性创建 3 行，第一行高度是 50px ，第二行高度是 350px 和第三行高度是 50px。最后，使用 grid-gap 属性在网格中的网格项之间添加一个间隙。 3、添加 grid-template-areas这个属性被称为网格区域，也叫模板区域，能够让我们轻松地进行布局实验。要将它添加到网格中，我们只需给网格容器加一个 grid-template-areas 属性即可。 语法可能有点奇怪，因为它不像其他的 CSS 语法。例如： 12345678910.container &#123; display: grid; grid-gap: 5px; grid-template-columns: repeat(12, 1fr); grid-template-rows: 50px 350px 50px; grid-template-areas: "h h h h h h h h h h h h" "m m c c c c c c c c c c" "f f f f f f f f f f f f";&#125; grid-template-areas 属性背后的逻辑是你在代码中创建的网格可视化表示。正如你所看到的，它有 3 行 12 列，和我们在 grid-template-columns 和 grid-template-rows 中定义的正好呼应。每行代表一行，用网格术语来说是 网格轨道(Grid Track) ，每个字符（ h，m，c，f）代表一个网格单元格。愚人码头注：其实是 网格区域(Grid Area) 名称，你可以使用任意名称。四个字母中的每一个现在都形成一个矩形 grid-area 。你可能已经猜到，我选择了字符 h，m，c，f，是因为他们是 header, menu, content 和 footer 的首字母。 当然，我可以把它们叫做任何想要的名称，但是使用他们所描述的东西的第一个字符更加容易让人理解。 4、给网格项设定网格区域名称现在我们需要将这些字符与网格中的网格项建立对应的连接。 要做到这一点，我们将在网格项使用 grid-area 属性： 123456789101112.header &#123; grid-area: h;&#125;.menu &#123; grid-area: m;&#125;.content &#123; grid-area: c;&#125;.footer &#123; grid-area: f;&#125; 以下是完整的布局效果： HEADERMENUCONTENTFOOTER 5、尝试其他布局现在，我们开始讨论 Grid(网格) 布局 特性的精妙之处，因为我们可以很容易地对布局进行修改尝试。只需修改 grid-template-areas 属性的字符即可。举个例子，把 menu 移到右边： 123456.container2 &#123; grid-template-areas: "h h h h h h h h h h h h" "c c c c c c c c c c m m" "f f f f f f f f f f f f";&#125; 修改后的布局效果： HEADERMENUCONTENTFOOTER 6、我们可以使用点 . 来创建空白的网格单元格。123456.container3 &#123; grid-template-areas: ". h h h h h h h h h h ." "c c c c c c c c c c m m" ". f f f f f f f f f f .";&#125; 修改的布局效果看起来是这样的： HEADERMENUCONTENTFOOTER 7、添加响应式布局12345678@media screen and (max-width: 640px) &#123; .container &#123; grid-template-areas: "m m m m m m h h h h h h" "c c c c c c c c c c c c" "f f f f f f f f f f f f"; &#125;&#125; 请记住，所有这些更改都是使用纯 CSS 完成的，不需要修改 HTML 。 无论 div 标签如何在 HTML 中是怎么样的顺序结构，我们都可以随意转换。（愚人码头注：这点与 flexbox 类似，网格项（grid items）的源顺序无关紧要。你的 CSS 可以以任何顺序放置它们，这使得使用 媒体查询（media queries）重新排列网格变得非常容易。）这被称为结构和表现分离， Grid(网格) 布局真正做到了这点，对于 CSS 来说是一个巨大的进步。它允许 HTML 成为它想要的样子: 作为内容的标记。HTML 结构不再受限于样式表现，比如不要为了实现某种布局而多次嵌套，现在这些都可以让 CSS 来完成。如果你错过了 Grid(网格) 布局的最简入门，请阅读：5分钟学会 CSS Grid 布局 。 了解更多请阅读：CSS Grid 布局完全指南(图解 Grid 详细教程)，让你体会 Grid 布局真正的强大和灵活。]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5整理]]></title>
    <url>%2F2017%2F05%2F23%2FHTML5%2F</url>
    <content type="text"><![CDATA[微信 H5 的开发过程中遇到的一些坑1. 页面滚动不顺畅,在ios版的微信里会出现问题，解决办法给要滚动区域的元素加上这个属性：1-webkit-overflow-scrolling: touch; 2. ios版会把页面中的一串数字识别成电话然后触摸会调用系统不打电话，解决办法加上meta1&lt; meta content="telephone=no,email=no" name="format-detection" /&gt; 3. 在一些文字过多的地方Android版微信会把文字变大而ios则不会，这样会导致排版错乱页面变得很丑…12解决的办法是给包裹文字的元素加上:display: inline-block; 4. 点击元素产生背景加上这个:1-webkit-tap-highlight-color: rgba(0,0,0,0); 5. click的300ms延迟1要么禁止页面的缩放，要么如果使用了zepto，则用tap代替click，要么使用fastclick。]]></content>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 Flexible Box (Flex 布局)]]></title>
    <url>%2F2016%2F11%2F14%2FCSS3-flexible%2F</url>
    <content type="text"><![CDATA[一、Flex布局是什么？Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。Flex是一组规则，用于在父容器中自动扩展多列和多行。1111 1111 1111 1111 1111 111123451222 222345 123456789//任何一个容器都可以指定为Flex布局。.flexible-flex &#123; display: flex;//父级设置该属性,任何一个容器都可以指定为Flex布局; display: -webkit-flex; /* Safari */&#125;.flexible-inline-flex &#123; display: inline-flex;//父级设置该属性,行内元素&#125; 二、浏览器兼容性 三、基本概念采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 四、容器的属性1234567891011flex-directionflex-wrapflex-flowjustify-contentalign-itemsalign-content 1. flex-direction方向设置主轴对齐方式 默认 row x轴从左到右, flex-direction: row, row-reverse, column, column-reverserow-1row-2row-3row-reverse-1row-reverse-2row-reverse-3column-1column-2column-3column-reverse-1column-reverse-2column-reverse-3 12345678910111213141516171819.box &#123; flex-direction: row | row-reverse | column | column-reverse;&#125;ul &#123; display: flex;&#125;ul.row &#123; flex-direction: row;//默认值：主轴为水平方向，起点在左端。&#125;ul.row-reverse &#123; flex-direction: row-reverse;//主轴为水平方向，起点在右端。&#125;ul.column &#123; flex-direction: column;//主轴为垂直方向，起点在上沿&#125;ul.column-reverse &#123; flex-direction: column-reverse;主轴为垂直方向，起点在下沿。&#125; 2. flex-wrap子元素换行的方式,默认nowrap,x轴从左到右,x轴的方向决定了新行堆叠的方向1. flex-wrap: nowrapabcd2. flex-wrap: wrapabcd3. flex-wrap: wrap-reverseabcd 1234567891011121314151617181920.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125;.flex-wrap ul &#123; display: flex;&#125;.flex-wrap li &#123; width: 100px; height: 50px;&#125;.flex-wrap .nowrap &#123; flex-wrap: nowrap;//1. 默认不换行,可以不写;&#125;.flex-wrap .wrap &#123; flex-wrap: wrap;//2. 换行，第一行在上方&#125;.flex-wrap .wrap-reverse &#123; flex-wrap: wrap-reverse;//3. 换行，第一行在下方。&#125; 3. flex-flow行排,竖排 &amp;&amp; 次序: order示例flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。1. 从左到右行排: flex-flow: row nowrapabc2. 竖排: flex-flow: column, order改变排序abc3. 右到左: flex-flow:column wrap-reverse;abc 12345678910111213141516171819202122232425.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125;ul&#123; display: flex; //flex-flow: row nowrap;1. 默认就是从左到右,可以不写;&#125;ul.column&#123; flex-flow: column;//2. 竖排&#125;ul.column li:nth-child(2) &#123; order: 1;&#125;ul.column li:nth-child(3) &#123; order: -1;&#125;ul.wrap-reverse&#123; flex-flow: column wrap-reverse;//3. 从右到左 height: 50px;&#125; 4. justify-content示例：justify-content属性定义了项目在主轴上的对齐方式。1. flex-startabc2. flex-endabc3. centerabc4. space-betweenabc5. space-aroundabc 1234567891011121314151617181920212223.box &#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125;ul&#123; display:flex;&#125;.flex-start&#123; justify-content: flex-start;//默认值：左对齐&#125;.flex-end&#123; justify-content: flex-end;//右对齐&#125;.center &#123; justify-content: center;//居中&#125;.space-between &#123; justify-content:space-between; //两端对齐，项目之间的间隔都相等。&#125;.space-around &#123; justify-content:space-around;//每个项目两侧的间隔相等。 //所以，项目之间的间隔比项目与边框的间隔大一倍&#125; 5. align-items属性align-items属性定义项目在交叉轴上如何对齐。 12345678910.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125;//它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。flex-start：交叉轴的起点对齐。flex-end：交叉轴的终点对齐。center：交叉轴的中点对齐。baseline: 项目的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 6. align-content属性align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 1234567891011.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125;//该属性可能取6个值。flex-start：与交叉轴的起点对齐。flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。 五、项目的属性123456orderflex-growflex-shrinkflex-basisflexalign-self 1. order属性order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。abc1234567891011.item &#123; order: &lt;integer&gt;;&#125;ul.column li:nth-child(2) &#123; order: 1;&#125;ul.column li:nth-child(3) &#123; order: -1;&#125; 2. flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 123.item &#123; flex-grow: &lt;number&gt;; /* default 0 */&#125; 3. flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 123.item &#123; flex-shrink: &lt;number&gt;; /* default 1 */&#125; 4. flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 123.item &#123; flex-basis: &lt;length&gt; | auto; /* default auto */&#125; 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 5. flex属性flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 123.item &#123; flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]&#125; 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 6. align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 123.item &#123; align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。More info: www.runoob.com]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用CSS3整理]]></title>
    <url>%2F2016%2F05%2F21%2FCSS3-finishing%2F</url>
    <content type="text"><![CDATA[显示几行,超出显示…（x,n要改为实际数字，ie,ff不支持省略号）12345678display: block;display: -webkit-box;overflow: hidden;-webkit-line-clamp: 2;-webkit-box-orient: vertical;text-overflow: ellipsis;line-height: X;max-height: X*N; 图片遮罩1. 方形的图变成圆形显示123img &#123; clip-path: circle(100px at center);&#125; 2. 文字和背景图在某个形状内显示1234567.bg-mask｛ width: 200px; height: 200px; background: url(img/orig.jpg);//背景图片 color: red; -webkit-mask-box-image: url(img/mask.png);//米老鼠图形内填充，图形外是全透明；｝ body里所有的 a 不能点击的链接123body &#123; pointer-events: none;// ie9,ie10不支持.&#125; iPhone 设备 横屏字不要放大123456@media screen and (max-device-width: 1023px)&#123; body&#123; -webkit-text-size-adjust:none; -ms-text-size-adjust:none &#125;&#125; iPhone 设备 滚动条滚得更灵活123html, body &#123; -webkit-overflow-scrolling: touch;&#125; 宽高包含border\padding值123-webkit-box-sizing: border-box;-moz-box-sizing: border-box;box-sizing: border-box; 打勾动画 1234567891011121314151617181920.successIcon&#123; display: inline-block; width:60px; height: 60px; background: url("/img/confirmation-tick.png") no-repeat left center; background-size: auto 100%; animation: fill 0.56s steps(13, start) forwards; -webkit-animation: fill 0.56s steps(13, start) forwards; -ms-animation: fill 0.56s steps(13, start) forwards&#125;//780 = (60/170)*2210, 170是每帧图的宽，170*13(13帧)= 2210;@keyframes fill &#123; to &#123; background-position: -780px &#125;&#125;@-webkit-keyframes fill &#123; to &#123; background-position: -780px &#125;&#125;@-ms-keyframes fill &#123; to &#123; background-position: -780px &#125;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3选择器nth-child(n)实现隔几行选择元素]]></title>
    <url>%2F2015%2F11%2F27%2FCSS3-nth-child-n%2F</url>
    <content type="text"><![CDATA[nth-child(n)，n 可以是数字、关键词或公式。选择器匹配属于其父元素的第N个子元素，不论元素的类型。 一行显示4个，第4个的倍数+1另起一行:123li:nth-child(4n+1)&#123; clear: both ;&#125; 序号写法把第3个LI的背景设为橙色:123li:nth-child(3)&#123; background:orange;&#125; 倍数写法把第3、第6、第9…、所有3的倍数的LI的背景设为橙色:123li:nth-child(3n)&#123; background:orange;&#125; 倍数分组匹配：(1). 匹配第1、第4、第7、…、每3个为一组的第1个LI123li:nth-child(3n+1)&#123; background:orange;&#125; (2). 匹配第5、第8、第11、…、从第5个开始每3个为一组的第1个LI123li:nth-child(3n+5)&#123; background:orange;&#125; (3). 匹配第5-1=4、第10-1=9、…、第5的倍数减1个LI123li:nth-child(5n-1)&#123; background:orange;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS设置获取cookie]]></title>
    <url>%2F2015%2F11%2F03%2Fjs-get-cookie%2F</url>
    <content type="text"><![CDATA[js获取url指定参数值1234567891011121314function getCookie(cname) &#123; var name = cname + "="; var ca = document.cookie.split(';'); for(var i = 0; i &lt; ca.length; i++) &#123; var c = ca[i]; while (c.charAt(0) == ' ') &#123; c = c.substring(1); &#125; if (c.indexOf(name) == 0) &#123; return c.substring(name.length, c.length); &#125; &#125; return "";&#125; 123456789//使用 $("a").click(function () &#123; var external_url = $(this).attr('href'); external_url = $.trim(external_url); var cookieSelect = "external-url=" + external_url; document.cookie = cookieSelect;//设置cookie &#125;);var external_url = getCookie("external-url");//获取cookie]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 常用命令]]></title>
    <url>%2F2015%2F10%2F19%2Fgit%2F</url>
    <content type="text"><![CDATA[创建版本库12git clone &lt;url&gt; // 克隆远程版本库git init //初始化本地版本库 修改和提交12345678910git status //查看状态git diff //查看变更内容git add . //跟踪所有改动过的文件git add &lt;file&gt; //跟踪指定的文件git add --all //提交全部git mv &lt;old&gt; &lt;new&gt; //文件改名git rm &lt;file&gt; //删除文件git rm --cached &lt;file&gt; //停止跟踪文件但不删除git commit -m "commit message" //提交文件git commit --amend //修改最后一次提交 常用提交流程12345git status git pull -r git add ABC-themes/abc/ //添加abc文件夹git commit -m "[ABC-15] " //提交消息git push 查看提交历史123git log //查看提交历史git log -p &lt;file&gt; //查看指定文件的提交历史git blame &lt;file&gt; //以列表方式查看指定文件的提交历史 撤消1234567891011git reset --hard HEAD //撤消工作目录中所有示提交文件的修改内容，撤消后就找不回来了,是将工作区、暂存取和HEAD保持一致git reset --hard //放弃本地修改,是将咱暂存区和HEAD的提交保持一致git checkout HEAD &lt;file&gt; //撤消指定未提交文件的修改内容git checkout -- . //删除本地所有改动 git reflog //可以查看所有分支的所有操作记录//用git log则是看不出来被删除的commitid; git reflog包括被删除的commitid，我们就可以买后悔药，恢复到被删除的那个版本git revert &lt;commit&gt; //撤销 某次操作 没有PUSH之前, 取消前次commit,回到上一次提交（adbe592）12git refloggit reset adbe592 撤消指定的提交, 远程不留历史记录12345git refloggit reset --hard 37d463236f7a8//回退到37d463236f7a8版本, 这一步之前一定要保存好文件，之后就什么都没有了git push origin feature/ABC-99 -f //强制, push &lt;&gt; -f,不强推会冲突，推不上，必须强推 git revert 和 git reset的区别1234567git revert 撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交 * git revert HEAD 撤销前一次 commit * git revert HEAD^ 撤销前前一次 commit * git revert commit （比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容git reset是直接删除指定的commit,远程不留历史记录. 分支与标签123456789git branch //显示所有本地分支git branch -a //查看本地和远程所有分支git branch -r | grep r126 //查看含有r126的分支git checkout &lt;branch/tag&gt; //切换到指定分支或标签git branch &lt;new-branch&gt; //创建新分支git branch -d &lt;branch&gt; //删除本地分支git tag //列出所有本地标签git tag &lt;tagname&gt; //基于最新提交创建标签git tag -d &lt;tagname&gt; //删除标签 常用切换到指定分支流程123git fetch --allgit branch -r | grep ABC //查看含有ABC的分支git checkout --track origin/feature/ABC-3543 切换到分支ABC-2:12345git stashgit fetchgit branch -D ABC-2git checkout ABC-2git stash pop 指针分离develop分支1git checkout develop //git checkout origin/develop是远程，要切回本地：git checkout develop 合并与衍合12git merge &lt;branch&gt; //合并指定分支到当前分支（需先切换到当前分支操作）git rebase &lt;branch&gt; //衍合指定分支到当前分支 在support分支merge ABC-2739分支123git checkout origin/supportgit merge origin/ABC-2739git push git rebase 后再git merge1234git pull -r //rebase之前需要经master分支拉到最新git checkout origin/dev //切换分支到需要rebase的分支，这里是dev分支git rebase master //有冲突就解决冲突，解决后直接git add . 再git rebase --continue即可切换到master分支，执行git merge dev 解决冲突, 撤下不要合并的代码:1234567git stashgit loggit rebase -i HEAD~7 //合并7条 commit提交为一个提交,//git checkout themes/abc/css/git rebase --continue //合并冲突，本地如果产生冲突，手动解决冲突之后，结合"git add 文件"命令一起用与修复冲突git rebase --abort //放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；git stash pop 没有PUSH之前,取消add的文件123456789101112131415161.git rebase --abort //放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；git reset --soft d688f04 //回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可；git stashgit statusgit pull --rebase2.git reset --hard HEAD~ // 是将工作区、暂存取和HEAD保持一致git reset --soft HEAD^//取消上次commitgit statusgit rebase --continue //合并冲突，本地如果产生冲突，手动解决冲突之后，结合"git add 文件"命令一起用与修复冲突git branch --all //显示所有远距离和局部树枝git rebase --abort //放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；git pull --rebase 远程操作123456789git remote -v //查看远程版本信息git remote show &lt;remote&gt; //查看指定远程版本库信息git remote add &lt;remote&gt; &lt;url //添加远程版本库git fetch &lt;remote&gt; //从远程库获取代码git fetch -p //获取被删减后的远程分支git pull &lt;remote&gt; &lt;branch&gt; //下载代码及快速合并git pull -rgit push &lt;remote&gt; &lt;branch&gt; //上传代码及快速合并git push &lt;remote&gt; : &lt;branch/tag-name&gt; //删除远程分支或标签git push --tags //上传所有标签 git版本更新（对于Ubuntu，此PPA提供最新的稳定上游Git版本）1231. sudo add-apt-repository ppa:git-core/ppa2. sudo apt update 3. apt install git 本地存储12git stash //本地存储git stash pop //恢复工作区的内容,删除栈中对应的stash 拿stash里的文件,{}{1}{2}是stash名称前的带的123git stashgit stash list //本地存储列表git stash apply stash@&#123;0&#125; //恢复上次0,1,2...存储 其它12345678910111213141516git checkout -- .//删除本地所有不提交改动git reset --hard //重置git clean -df //清掉所有修改git stash clear //清掉stashgit stash//暂存并隐藏本地未提交git stash pop//显示暂藏git pull = git fetch + git merge FETCH_HEAD git pull --rebase = git fetch + git rebase FETCH_HEAD 查看ssh-key: 1. cd ~/.ssh/2. ls3. vim id_rsa 或 code id_rsassh-keygen -t rsa -f github -C "" //生成ssh-key]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js判断设备]]></title>
    <url>%2F2015%2F05%2F03%2Fjs-get-operating-system%2F</url>
    <content type="text"><![CDATA[判断设备类型123456789101112131415161718192021222324function myBrowser() &#123; var userAgent = navigator.userAgent; if (userAgent.indexOf("Edge") &gt; -1 &amp;&amp; navigator.appVersion.indexOf('Edge') &gt; -1) &#123; return 'Edge'; &#125; else if (userAgent.indexOf("Opera") != -1 || userAgent.indexOf('OPR') != -1) &#123; return 'Opera'; &#125; else if (userAgent.indexOf("Chrome") != -1) &#123; return 'Chrome'; &#125; else if (userAgent.indexOf("Safari") != -1) &#123; return 'Safari'; &#125; else if (userAgent.indexOf("Firefox") != -1) &#123; return 'Firefox'; &#125; else if ((userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) &#123; return 'IE'; &#125; else &#123; return 'unknown'; &#125;&#125; if (myBrowser() == 'IE' || myBrowser() == 'Firefox') &#123; $(window).on('load resize', function () &#123; ...... &#125;) &#125;; 判断设备类型2015123456789101112131415161718192021222324252627282930313233343536373839404142function getMobileOperatingSystem() &#123; var userAgent = navigator.userAgent || navigator.vendor || window.opera; var ver = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/); if(userAgent.match(/SAMSUNG|SGH-[I|N|T]|GT-[I|P|N]|SM-[N|P|T|Z|G]|SHV-E|SCH-[I|J|R|S]|SPH-L/i)) &#123; return 'samsung'; &#125; else if (userAgent.match(/iPhone/i) || userAgent.match(/iPod/i)) &#123; ver = parseInt(ver[1], 10); if(ver &lt; 10)&#123; return 'ios ios9-below'; &#125; else &#123; return 'ios'; &#125; &#125; else if (userAgent.match(/iPad/i)) &#123; ver = parseInt(ver[1], 10); if(ver &lt; 10)&#123; return 'ios ipad ios9-below'; &#125;else &#123; return 'ios ipad'; &#125; &#125; else if (userAgent.match(/Android/i)) &#123; return 'android'; &#125; else if (userAgent.match(/FIREFOX/i)) &#123; return 'firefox no-touch'; &#125;else if (/MSIE 9/i.test(userAgent)) &#123; return 'ie9 no-touch'; &#125;else &#123; return 'unknown no-touch'; &#125;&#125;navigator.sayswho= (function()&#123; var ua= navigator.userAgent, tem, M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || []; M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?']; if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]); var str = M.join(' ') ; str = str.split(' '); if( str[0] == 'Safari' &amp;&amp; str[1] &lt; 10) &#123; return 'safari9-below'; &#125;&#125;); 12345678$(function()&#123; $('body').addClass(getMobileOperatingSystem()).addClass(navigator.sayswho()); //如果body有ios,同时屏幕宽度小于768px,就是苹果手机; if($('body').hasClass('ios') &amp;&amp; $(window).width() &lt; 768) &#123; ... &#125;&#125;);]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS获取当前页面页面URL信息]]></title>
    <url>%2F2014%2F11%2F03%2Fjs-get-url%2F</url>
    <content type="text"><![CDATA[js获取url指定参数值12345678910111213function GetQueryString(name) &#123; var reg = new RegExp("(^|&amp;)" + name + "=([^&amp;]*)(&amp;|$)"); var r = window.location.search.substr(1).match(reg); if (r != null) &#123; return unescape(r[2]) &#125; return null;&#125;假设url地址是http://www.xxx.com?ProID=100&amp;UserID=200，可用GetQueryString("ProID")或GetQueryString("UserID")获取相应参数值。 12345678910111213function getQueryString(name, str) &#123; var reg = new RegExp("(^|&amp;)" + name + "=([^&amp;]*)(&amp;|$)"); var r = str ? str.match(reg) : window.location.search.substr(1).match(reg); if (r != null) &#123; var res = unescape(r[2]); return res; &#125; return null; &#125; 假设url地址是http://www.xxx.com?ProID=100?200，要取200: r = href.split('?'), getQueryString('ProID', r[1]); 设置或获取对象指定的文件名或路径1234url = http://www.baidu.com/baidu/postedit/46887983?wd=hei+jude&amp;tn=monline_4_dgwindow.location.pathname;---&gt; "/baidu/postedit/46887983" 设置或获取整个 URL 为字符串1234url = http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dgwindow.location.href;---&gt; "http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dg" 设置或获取与 URL 关联的端口号码123url =http://192.168.14.97:2000/analytics/profiles/window.location.port;---&gt; "2000" 设置或获取 URL 的协议部分123url = http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dgwindow.location.protocol;---&gt; "http:" 设置或获取 href 属性中在井号“#”后面的分段123url = http://192.168.2.11/forum.php?mod=viewthread&amp;tid=65&amp;page=1&amp;extra=#pid207window.location.hash;---&gt; "#pid207" 设置或获取 location 或 URL 的 hostname 和 port 号码123url = http://192.168.14.97:2000/analytics/profiles/window.location.host;---&gt; "192.168.14.97:2000" 设置或获取 location 或 URL 的 hostname123url = http://192.168.14.97:2000/analytics/profiles/window.location.hostname;---&gt; "192.168.14.97" 设置或获取 href 属性中跟在问号后面的部分123456url = http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dgwindow.location.search;---&gt; "?wd=hei+jude&amp;tn=monline_4_dg"pathname.split('tn=')[1];---&gt; "monline_4_dg" 获取变量的值(截取等号后面的部分)12var url = window.location.search;var loc = url.substring(url.lastIndexOf('=')+1, url.length); iframe插入页面1window.location.replace("main.html");]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用的CSS2整理]]></title>
    <url>%2F2013%2F03%2F19%2FCSS2-finishing%2F</url>
    <content type="text"><![CDATA[一、上下左右居中1234567891011.box &#123; display: table; table-layout: fixed; //ie width: 100%; height: 100%; text-align:center;&#125;.box div &#123; display: table-cell; vertical-align: middle;&#125; 二、换行1. 强制不换行123div&#123; white-space:nowrap;&#125; 2. 自动换行1234div&#123; word-wrap: break-word; word-break: normal;&#125; 3. 强制英文单词断行123div&#123; word-break:break-all;&#125; 三、CSS文字效果1234567891011121314151617181920212223241. 文字一行显示，超出宽度用省略号代替:div &#123; overflow:hidden; display:inline-block; white-space:nowrap; text-overflow:ellipsis; width:130px;&#125;2. 小写的字变成大写,大写的字放大: font-variant: small-caps;3. 字斜的: font-style: italic;4. 首字母大写: text-transform:capitalize;5. 全大写: text-transform : uppercase;6. 全小写: text-transform:lowercase;7. 字上划线: text-decoration:overline;8. 字中划线: text-decoration:line-through;9. 字下划线: text-decoration:underline; 四、.cur图片替换鼠标默认指针123456789101112131415161718.box &#123; position:relative;&#125;.box a &#123; position:absolute; left:0px; height:50%; width:100%; background: url(_blank);&#125;.box a.previous &#123; top:0; cursor:url(images/pic/mouseup_is.cur),auto;&#125;.box a.next &#123; bottom:0; cursor:url(images/pic/mousedown_is.cur),auto;&#125; 五、div加滚动条显示内容1234567891011121314151617div&#123; overflow-y: auto; overflow: auto; width: 400px; height: 200px;&#125;滚动条加颜色：div &#123; scrollbar-arrow-color: #fff; scrollbar-face-color: #2073c1; scrollbar-darkshadow-color: #2073c1; scrollbar-highlight-color: #CDCDCD; scrollbar-shadow-color: #CDCDCD; scrollbar-track-color: #CDCDCD; scrollbar-3dlight-color: #2073c1;&#125; 六、高度等于外围的高度1. height=#div-id的高度：1height:expression(document.getElementById('div-id').offsetHeight+"px"); 2. height=body的高度：1height:expression(document.body.offsetHeight+ "px"); 七、鼠标经过有链接的图片改变透明度12345a:hover img&#123; -moz-opacity: 0.85; opacity: 0.85;filter: Alpha(Opacity=85);&#125;]]></content>
      <tags>
        <tag>CSS2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IE6 CSS]]></title>
    <url>%2F2012%2F01%2F19%2FCSS-ie6%2F</url>
    <content type="text"><![CDATA[IE6 高度等于外围的高度12height=#bpic的高度：height:expression(document.getElementById('bpic').offsetHeight+"px");height=body的高度：height:expression(document.body.offsetHeight+ "px"); IE6 图片最大宽度12max-width:695px;_width: expression(this.width &gt; 695 ? 695 : true); IE6 图片最小高度166px12min-height:166px;_height:expression((document.documentElement.clientHeight||document.body.clientHeight)&gt;166?"166px":""); IE6 高度=外围ID的高度(id=”case”)12height:100%;_height:expression(document.getElementById('case').offsetHeight+'px'); IE6 背景透明 png2412345.qq &#123; background:url(../images/pic/top.png) no-repeat; _filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='http://img0.bdstatic.com/static/widget/common/top/images/to-top_6744d50c0e.png');//ie6 _background:0 //ie6&#125; IE6 最小宽度1234.wrapper &#123; min-width:500px; _width:expression((document.documentElement.clientWidth||document.body.clientWidth) &lt; 500 ? "500px": "auto"); //ie6&#125; IE6 position:fixed1234567891011121314.gotop &#123; position:fixed; z-index:100; top:10px; right: 0px; _position:absolute;//ie6 _top:auto;//ie6 _top:expression(eval(document.documentElement.scrollTop)+10);//ie6&#125;*html &#123; background-image:url(about:blank);//ie6 background-attachment:fixed;//ie6&#125; IE6 fixed bottom的高度123456789101112.qq &#123; position:fixed; right:5px; bottom:100px; _position:absolute;//ie6 _bottom:auto;_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||100))); //ie6&#125;*html &#123; _background-image:url(about:blank); _background-attachment:scroll&#125;]]></content>
      <tags>
        <tag>CSS2</tag>
      </tags>
  </entry>
</search>
