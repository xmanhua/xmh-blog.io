<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hash值自定义某元素定位时候遇到的问题和解决方案]]></title>
    <url>%2F2022%2F05%2F23%2FHTML5-hash%2F</url>
    <content type="text"><![CDATA[问题: 在chrome访问一个带hash的url, 执行滚动到页面上存在的某一个元素的位置, 每当刷新页面会出现回滚的现象 解决方案: history.scrollRestoration = ‘’manual’, 把chrome自动记录改成手动 history-api-scroll-restorationcode:1234if ('scrollRestoration' in history) &#123; #// Back off, browser, I got this... history.scrollRestoration = 'manual';&#125;]]></content>
      <tags>
        <tag>JS</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS浏览器hack]]></title>
    <url>%2F2022%2F05%2F11%2FCSS-hack%2F</url>
    <content type="text"><![CDATA[CSS检测浏览器适用与Internet Explorer、Firefox、Safari和Chrome的更新版本 html:1234567891011121314151617181920Browser: &lt;span class="firefox"&gt;Firefox&lt;/span&gt;&lt;span class="msie"&gt;Internet Explorer&lt;/span&gt;&lt;span class="safari"&gt;Safari&lt;/span&gt;&lt;span class="chrome"&gt;Chrome&lt;/span&gt;OS: &lt;span class="win"&gt;Windows&lt;/span&gt;&lt;span class="mac"&gt;Mac OS X&lt;/span&gt;ffsetHeight+"px");Detect Win/Mac OS and Basic Browser with CSS Only&lt;br&gt;Works with Internet Explorer (any), Firefox (any), Newer versions of Safari and Chrome&lt;br&gt;(Chrome cannot detect OS at this time)&lt;br&gt;We think you are using...&lt;br&gt;Browser: &lt;span class="firefox"&gt;Firefox&lt;/span&gt;&lt;span class="msie"&gt;Internet Explorer&lt;/span&gt;&lt;span class="safari"&gt;Safari&lt;/span&gt;&lt;span class="chrome"&gt;Chrome&lt;/span&gt;OS: &lt;span class="win"&gt;Windows&lt;/span&gt;&lt;span class="mac"&gt;Mac OS X&lt;/span&gt; css:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#/* Hide all possibilities in advance */.firefox, .msie, .safari, .chrome, .win, .mac &#123; display:none; &#125;# ie浏览器:@media screen and (-ms-high-contrast: none) &#123; .msie, .win &#123; display:block; &#125;&#125;#/* Detect Internet Explorer 9 or Greater */@media screen and (min-width:0\0) and (min-resolution: +72dpi) &#123; .msie, .win &#123; display:block; &#125; &#125;#/* Detect Internet Explorer 8 or Lower and veru old versions of Firefox */@media \0screen\,screen\9 &#123; .msie, .win &#123; display:block; &#125; &#125;#/* Detect any version of Firefox */_:-moz-tree-row(hover), .firefox &#123; display:block; &#125;#/* Rule out any straggling Internet Explorer References */_:-moz-tree-row(hover), .msie, .win &#123; display:none; &#125;#/* Detect Windows Firefox 4 or newer */@media screen and (-moz-windows-theme) &#123; .win, .firefox &#123; display:block; &#125; &#125;#/* Detect Windows Firefox 25 or newer */@media screen and (-moz-os-version) &#123; .win, .firefox &#123; display:block; &#125; &#125;#/* Detect Mac Firefox 25 or newer */@supports (-moz-osx-font-smoothing:auto) &#123; .mac, .firefox &#123; display:block; &#125; &#125;#/* Detect Chrome 22+ (and Safari 6.1+) */@media screen and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm), screen and(-webkit-min-device-pixel-ratio:0) &#123; .chrome &#123; display:block; &#125;&#125;#/* Detect Chrome 28+ */@media screen and (-webkit-min-device-pixel-ratio:0) &#123; @supports (background-attachment:local) &#123; .chrome &#123; display:block; &#125;&#125; #/* Detect Mac Safari 6.1 or newer, hide any straggling Chrome references */@media screen and (-webkit-max-device-pixel-ratio:1) and (min-color-index:0) &#123; .mac, .safari &#123;(; display:block; );&#125; .chrome &#123;(; display:none; );&#125; &#125;#/* For PowerPC People who have Internet Explorer for Mac... */ /*\*//*/ .mac, .msie &#123; display:block; &#125; /**//*\*//*/ .win &#123; display:none; &#125; /**/]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[husky安装和配置]]></title>
    <url>%2F2022%2F03%2F01%2Fhusky%2F</url>
    <content type="text"><![CDATA[husky 文档 husky 安装1npm install husky --save-dev husky (7.0 +)配置package.json1234567891011"scripts": &#123; # "eslint": "eslint --cache --ext .js src --", # "stylelint": "stylelint **/*.scss", # "lint": "npm run eslint &amp;&amp; npm run stylelint", "husky": "cd ../../ &amp;&amp; husky install theme1/.husky &amp;&amp; cd theme1 &amp;&amp; npx husky add .husky/pre-commit 'cd themes/myThemes &amp;&amp; npm run lint'", &#125;# 备注: # 1. npm run lint,需要配置以上三个: "lint", "eslint", "stylelint";# 2. .husky文件夹要与.git文件夹同级, # 3. 'cd ../../', 是cd 到.git文件父级目录,theme1是.git文件父级目录名称,# 4. 'cd themes/myThemes" 是到package.json父级目录, 用来跑package.json里配置的: npm run lint husky 使用commit时跑lint, 代码通过eslint或stylelint验证,则commit成功, 否则不能提交代码.12git add .husky/pre-commitgit commit -m "Keep calm and commit" husky 停用删除 .husky/pre-commit文件就可以,下次想启用再npm run husky,会再生成.husky/pre-commit文件,commit时又可以用了.\ husky 卸载1npm uninstall husky &amp;&amp; git config --unset core.hooksPath]]></content>
      <tags>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js-监听元素DOMNodeInserted和DOMNodeRemoved]]></title>
    <url>%2F2021%2F12%2F25%2Fjs-DOMNodeInserted%2F</url>
    <content type="text"><![CDATA[监听document元素:$(document) .on('DOMNodeInserted', '.item-content .ajax-progress', function() {}) // 插入(DOMNodeInserted) .on('DOMNodeRemoved', '#edit-field-qc-publisher-button + .ajax-progress', function() {}) //删除(DOMNodeRemoved) }; ajaxComplete监听触发ajax事件:#ajaxComplete $(document).ajaxComplete(function (e) { const { activeElement } = e.target; if (activeElement.id === 'edit-back') { console.log(activeElement.text()); } else if (activeElement.id === 'edit-code') { ... } }); # ajaxSuccess]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[normalize.css]]></title>
    <url>%2F2021%2F09%2F25%2Fcss-normalize-css%2F</url>
    <content type="text"><![CDATA[软件简介https://github.com/necolas/normalize.css/Normalize.css 是一个可以定制的CSS文件，它让不同的浏览器在渲染网页元素的时候形式更统一。 安装1npm install --save normalize.css 应用12main.js全局引入import 'normalize.css' Normalize.css 能干什么?保留有用的默认值，不同于许多 CSS 的重置标准化的样式，适用范围广的元素。纠正错误和常见的浏览器的不一致性。一些细微的改进，提高了易用性。使用详细的注释来解释代码。支持的浏览器：Google Chrome (latest)Mozilla Firefox (latest)Mozilla Firefox ESROpera (latest)Apple Safari 6+Internet Explorer 8+ normalize.cssnormalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css *//* Document ========================================================================== *//** * 1. Correct the line height in all browsers. * 2. Prevent adjustments of font size after orientation changes in iOS. */html &#123; line-height: 1.15; /* 1 */ -webkit-text-size-adjust: 100%; /* 2 */&#125;/* Sections ========================================================================== *//** * Remove the margin in all browsers. */body &#123; margin: 0;&#125;/** * Render the `main` element consistently in IE. */main &#123; display: block;&#125;/** * Correct the font size and margin on `h1` elements within `section` and * `article` contexts in Chrome, Firefox, and Safari. */h1 &#123; font-size: 2em; margin: 0.67em 0;&#125;/* Grouping content ========================================================================== *//** * 1. Add the correct box sizing in Firefox. * 2. Show the overflow in Edge and IE. */hr &#123; box-sizing: content-box; /* 1 */ height: 0; /* 1 */ overflow: visible; /* 2 */&#125;/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */pre &#123; font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */&#125;/* Text-level semantics ========================================================================== *//** * Remove the gray background on active links in IE 10. */a &#123; background-color: transparent;&#125;/** * 1. Remove the bottom border in Chrome 57- * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. */abbr[title] &#123; border-bottom: none; /* 1 */ text-decoration: underline; /* 2 */ text-decoration: underline dotted; /* 2 */&#125;/** * Add the correct font weight in Chrome, Edge, and Safari. */b,strong &#123; font-weight: bolder;&#125;/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */code,kbd,samp &#123; font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */&#125;/** * Add the correct font size in all browsers. */small &#123; font-size: 80%;&#125;/** * Prevent `sub` and `sup` elements from affecting the line height in * all browsers. */sub,sup &#123; font-size: 75%; line-height: 0; position: relative; vertical-align: baseline;&#125;sub &#123; bottom: -0.25em;&#125;sup &#123; top: -0.5em;&#125;/* Embedded content ========================================================================== *//** * Remove the border on images inside links in IE 10. */img &#123; border-style: none;&#125;/* Forms ========================================================================== *//** * 1. Change the font styles in all browsers. * 2. Remove the margin in Firefox and Safari. */button,input,optgroup,select,textarea &#123; font-family: inherit; /* 1 */ font-size: 100%; /* 1 */ line-height: 1.15; /* 1 */ margin: 0; /* 2 */&#125;/** * Show the overflow in IE. * 1. Show the overflow in Edge. */button,input &#123; /* 1 */ overflow: visible;&#125;/** * Remove the inheritance of text transform in Edge, Firefox, and IE. * 1. Remove the inheritance of text transform in Firefox. */button,select &#123; /* 1 */ text-transform: none;&#125;/** * Correct the inability to style clickable types in iOS and Safari. */button,[type="button"],[type="reset"],[type="submit"] &#123; -webkit-appearance: button;&#125;/** * Remove the inner border and padding in Firefox. */button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner &#123; border-style: none; padding: 0;&#125;/** * Restore the focus styles unset by the previous rule. */button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring &#123; outline: 1px dotted ButtonText;&#125;/** * Correct the padding in Firefox. */fieldset &#123; padding: 0.35em 0.75em 0.625em;&#125;/** * 1. Correct the text wrapping in Edge and IE. * 2. Correct the color inheritance from `fieldset` elements in IE. * 3. Remove the padding so developers are not caught out when they zero out * `fieldset` elements in all browsers. */legend &#123; box-sizing: border-box; /* 1 */ color: inherit; /* 2 */ display: table; /* 1 */ max-width: 100%; /* 1 */ padding: 0; /* 3 */ white-space: normal; /* 1 */&#125;/** * Add the correct vertical alignment in Chrome, Firefox, and Opera. */progress &#123; vertical-align: baseline;&#125;/** * Remove the default vertical scrollbar in IE 10+. */textarea &#123; overflow: auto;&#125;/** * 1. Add the correct box sizing in IE 10. * 2. Remove the padding in IE 10. */[type="checkbox"],[type="radio"] &#123; box-sizing: border-box; /* 1 */ padding: 0; /* 2 */&#125;/** * Correct the cursor style of increment and decrement buttons in Chrome. */[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button &#123; height: auto;&#125;/** * 1. Correct the odd appearance in Chrome and Safari. * 2. Correct the outline style in Safari. */[type="search"] &#123; -webkit-appearance: textfield; /* 1 */ outline-offset: -2px; /* 2 */&#125;/** * Remove the inner padding in Chrome and Safari on macOS. */[type="search"]::-webkit-search-decoration &#123; -webkit-appearance: none;&#125;/** * 1. Correct the inability to style clickable types in iOS and Safari. * 2. Change font properties to `inherit` in Safari. */::-webkit-file-upload-button &#123; -webkit-appearance: button; /* 1 */ font: inherit; /* 2 */&#125;/* Interactive ========================================================================== *//* * Add the correct display in Edge, IE 10+, and Firefox. */details &#123; display: block;&#125;/* * Add the correct display in all browsers. */summary &#123; display: list-item;&#125;/* Misc ========================================================================== *//** * Add the correct display in IE 10+. */template &#123; display: none;&#125;/** * Add the correct display in IE 10. */[hidden] &#123; display: none;&#125;ffsetHeight+"px");/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css *//* Document ========================================================================== *//** * 1. Correct the line height in all browsers. * 2. Prevent adjustments of font size after orientation changes in iOS. */html &#123; line-height: 1.15; /* 1 */ -webkit-text-size-adjust: 100%; /* 2 */&#125;/* Sections ========================================================================== *//** * Remove the margin in all browsers. */body &#123; margin: 0;&#125;/** * Render the `main` element consistently in IE. */main &#123; display: block;&#125;/** * Correct the font size and margin on `h1` elements within `section` and * `article` contexts in Chrome, Firefox, and Safari. */h1 &#123; font-size: 2em; margin: 0.67em 0;&#125;/* Grouping content ========================================================================== *//** * 1. Add the correct box sizing in Firefox. * 2. Show the overflow in Edge and IE. */hr &#123; box-sizing: content-box; /* 1 */ height: 0; /* 1 */ overflow: visible; /* 2 */&#125;/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */pre &#123; font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */&#125;/* Text-level semantics ========================================================================== *//** * Remove the gray background on active links in IE 10. */a &#123; background-color: transparent;&#125;/** * 1. Remove the bottom border in Chrome 57- * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. */abbr[title] &#123; border-bottom: none; /* 1 */ text-decoration: underline; /* 2 */ text-decoration: underline dotted; /* 2 */&#125;/** * Add the correct font weight in Chrome, Edge, and Safari. */b,strong &#123; font-weight: bolder;&#125;/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */code,kbd,samp &#123; font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */&#125;/** * Add the correct font size in all browsers. */small &#123; font-size: 80%;&#125;/** * Prevent `sub` and `sup` elements from affecting the line height in * all browsers. */sub,sup &#123; font-size: 75%; line-height: 0; position: relative; vertical-align: baseline;&#125;sub &#123; bottom: -0.25em;&#125;sup &#123; top: -0.5em;&#125;/* Embedded content ========================================================================== *//** * Remove the border on images inside links in IE 10. */img &#123; border-style: none;&#125;/* Forms ========================================================================== *//** * 1. Change the font styles in all browsers. * 2. Remove the margin in Firefox and Safari. */button,input,optgroup,select,textarea &#123; font-family: inherit; /* 1 */ font-size: 100%; /* 1 */ line-height: 1.15; /* 1 */ margin: 0; /* 2 */&#125;/** * Show the overflow in IE. * 1. Show the overflow in Edge. */button,input &#123; /* 1 */ overflow: visible;&#125;/** * Remove the inheritance of text transform in Edge, Firefox, and IE. * 1. Remove the inheritance of text transform in Firefox. */button,select &#123; /* 1 */ text-transform: none;&#125;/** * Correct the inability to style clickable types in iOS and Safari. */button,[type="button"],[type="reset"],[type="submit"] &#123; -webkit-appearance: button;&#125;/** * Remove the inner border and padding in Firefox. */button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner &#123; border-style: none; padding: 0;&#125;/** * Restore the focus styles unset by the previous rule. */button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring &#123; outline: 1px dotted ButtonText;&#125;/** * Correct the padding in Firefox. */fieldset &#123; padding: 0.35em 0.75em 0.625em;&#125;/** * 1. Correct the text wrapping in Edge and IE. * 2. Correct the color inheritance from `fieldset` elements in IE. * 3. Remove the padding so developers are not caught out when they zero out * `fieldset` elements in all browsers. */legend &#123; box-sizing: border-box; /* 1 */ color: inherit; /* 2 */ display: table; /* 1 */ max-width: 100%; /* 1 */ padding: 0; /* 3 */ white-space: normal; /* 1 */&#125;/** * Add the correct vertical alignment in Chrome, Firefox, and Opera. */progress &#123; vertical-align: baseline;&#125;/** * Remove the default vertical scrollbar in IE 10+. */textarea &#123; overflow: auto;&#125;/** * 1. Add the correct box sizing in IE 10. * 2. Remove the padding in IE 10. */[type="checkbox"],[type="radio"] &#123; box-sizing: border-box; /* 1 */ padding: 0; /* 2 */&#125;/** * Correct the cursor style of increment and decrement buttons in Chrome. */[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button &#123; height: auto;&#125;/** * 1. Correct the odd appearance in Chrome and Safari. * 2. Correct the outline style in Safari. */[type="search"] &#123; -webkit-appearance: textfield; /* 1 */ outline-offset: -2px; /* 2 */&#125;/** * Remove the inner padding in Chrome and Safari on macOS. */[type="search"]::-webkit-search-decoration &#123; -webkit-appearance: none;&#125;/** * 1. Correct the inability to style clickable types in iOS and Safari. * 2. Change font properties to `inherit` in Safari. */::-webkit-file-upload-button &#123; -webkit-appearance: button; /* 1 */ font: inherit; /* 2 */&#125;/* Interactive ========================================================================== *//* * Add the correct display in Edge, IE 10+, and Firefox. */details &#123; display: block;&#125;/* * Add the correct display in all browsers. */summary &#123; display: list-item;&#125;/* Misc ========================================================================== *//** * Add the correct display in IE 10+. */template &#123; display: none;&#125;/** * Add the correct display in IE 10. */[hidden] &#123; display: none;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js-传入日期减去当前日期,得到剩余天数]]></title>
    <url>%2F2021%2F09%2F25%2Fjs-%E5%89%A9%E4%BD%99%E5%A4%A9%E6%95%B0%2F</url>
    <content type="text"><![CDATA[传入日期减去当前日期,得到剩余天数:const calculateDate = (days) =&gt; { const myDate = new Date(); const myToday = `${myDate.getFullYear()}-${myDate.getMonth() + 1}-${myDate.getDate()}`; const date1 = new Date(days); // console.log('myToday', myToday); const today = new Date(myToday); // const date2=new Date(yyyy-MM-dd); const date = (date1.getTime() - today.getTime()) / (1000 * 60 * 60 * 24); // 不考虑闰年否 return date.toFixed(0); };]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mixins.scss]]></title>
    <url>%2F2021%2F08%2F31%2Fmixins-scss%2F</url>
    <content type="text"><![CDATA[mixins.scss 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203@mixin text-line-clamp($line: 2) &#123; overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: $line;&#125;@mixin glyphicon($mark) &#123; content: '#&#123;$mark&#125;'; font-family: 'Glyphicons Halflings';&#125;@mixin image-zoom() &#123; transition: all 0.4s ease-out; &amp;:hover &#123; transform: scale(1.15); &#125;&#125;@mixin object-fit() &#123; position: absolute; left: 0; top: 0; width: 100%; height: 100%; object-fit: cover; font-family: 'object-fit: cover;';&#125;// Safari image border-radius@mixin mask-image() &#123; -webkit-mask-image: -webkit-radial-gradient(white, black);&#125;@mixin readmore($color: $pink) &#123; color: $color; text-transform: uppercase; text-decoration: none; &amp;::after &#123; @include glyphicon('\e072'); display: inline-block; font-size: 12px; font-weight: 500; transition: padding .25s; transform: scale(.8); -webkit-transform: scale(.8); &#125; &amp;:hover::after, &amp;:focus::after, &amp;:active::after &#123; padding-left: 8px; &#125;&#125;@mixin position($pos:absolute,$top:0,$con:'',$w:100%,$h:100%)&#123; position: $pos; top: $top; content: $con; display: inline-block; width: $w; height: $h;&#125;@mixin change-color($normal: $primary-shade, $highlight: $primary-dark) &#123; color: $normal; &amp;:hover, &amp;:active &#123; color: $highlight; &#125;&#125;@mixin moveup() &#123; transform: translateY(-10px);&#125;@mixin add-shadow($x:4px, $y:6px, $width:8px, $color: rgba(0, 0, 0, .3)) &#123; box-shadow: $x $y $width $color;&#125;@mixin content-title &#123; font-size: 28px; font-weight: 900; letter-spacing: -0.02rem;&#125;@mixin page-title &#123; font-size: 32px; font-weight: 900; line-height: 40px; @media (max-width: 1200px) &#123; font-size: 30px; line-height: 1.4; letter-spacing: -0.33px; &#125;&#125;@mixin flex($hov: space-between, $col: center) &#123; display: flex; justify-content: $hov; align-items: $col;&#125;@mixin bgImg($w: 100%, $h: 100%, $img: "", $size: 100%) &#123; display: inline-block; width: $w; height: $h; background: url($img) no-repeat center; background-size: $size;&#125;@mixin bg-width-full($bg) &#123; background: $bg; position: relative; &amp;::before, &amp;::after &#123; @include position($w: 20%); left: -20%; background: $bg; &#125; &amp;::after &#123; right: -20%; left: auto; &#125;&#125;@mixin button($w: 189px, $h: 53px, $fcolor: #000, $bg: $ui-yellow,$h-bg: $dark-yellow,$fz: 16px) &#123; display: inline-block; width: $w; height: $h; line-height: $h; color: $fcolor; text-transform: uppercase; text-decoration: none; background: $bg; border-color: $bg; font-size: $fz; font-weight: bold; &amp;:hover &#123; background: $h-bg; border-color: $h-bg; &#125;&#125;@mixin down-arrow($color: $white, $deg: 45deg) &#123; border-right: 2px solid $color; border-bottom: 2px solid $color; transform: rotate($deg);&#125;@mixin hook-icon($color: $white, $deg: -45deg) &#123; border-left: 2px solid $color; border-bottom: 2px solid $color; transform: rotate($deg);&#125;@mixin circular($w, $h, $bg) &#123; display: inline-block; width: $w; height: $h; border-radius: 50%; background-color: $bg;&#125;@mixin input-text( $p: 10px, $h: 56px, $w: 100%, $br: 16px, $bg: $input-bg, $fs: 15px, $color: $dusk) &#123; box-sizing: border-box; padding: $p; border: none; border-radius: $br; background: none; background-color: $bg; width: $w; height: $h; outline: none; font-size: $fs; color: $color;&#125;@mixin select-arrow() &#123; background: $input-bg url(../images/select-arrow.png) no-repeat calc(100% - 16px) center; background-size: 18px auto;&#125;@mixin disabled-button &#123; background: #f5f5f5; border: 2px solid $disabled; color: $disabled; cursor: auto;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3与CSS2 上下左右居中]]></title>
    <url>%2F2021%2F08%2F25%2Fcss-center%2F</url>
    <content type="text"><![CDATA[css3 上下左右居中:1. transform:translate(左右，上下)上下左右居中:123456.video&#123; position:fixed; top:50%; left:50%; transform:translate(-50%,-50%);&#125; 2. flex (左右，上下)上下左右居中:12345.container&#123; display: flex; align-items: center;/* 垂直居中 */ justify-content: center;/* center左右居中, space-between两端对齐 */ &#125; css2 上下左右居中:3. position:absolute, margin(左右，上下)上下左右居中:123456789.video&#123; position:absolute; top:50%; left:50%; with: 100px; height: 100px; margin-top: -50px; margin-left: -50px;&#125; 4. display: table(左右，上下)上下左右居中:1234567891011.box &#123; display: table; table-layout: fixed; //ie width: 100%; height: 100%; text-align:center;&#125;.box div &#123; display: table-cell; vertical-align: middle;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp]]></title>
    <url>%2F2021%2F07%2F25%2Fgulp%2F</url>
    <content type="text"><![CDATA[安装gulp1npm i gulp gulp-cli -g 在当前themes下编译:12gulp sassgulp build 文件目录(同级):themes├───css # css文件夹├───js # js文件夹├───images # images文件夹├───fonts # fonts文件夹├───gulpfile.js # gulp配置├───fonts.list # fonts导入列表└───package.json 创建gulpfile.js文件(与package.json同级):12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970const &#123; task, watch, series, src, dest&#125; = require('gulp');var sass = require('gulp-sass')(require('sass'));var sourcemaps = require('gulp-sourcemaps');var autoprefixer = require('gulp-autoprefixer');var googleWebFonts = require('gulp-google-webfonts');var fs = require('fs');function set_env(type) &#123; env = type || 'dev'; fs.writeFile("js/env.js", 'function ENV()&#123;return"' + env + '"&#125;;', function (err) &#123; err &amp;&amp; console.log(err); &#125;);&#125;// buildtask('build', (done) =&gt; &#123; set_env(process.env.NODE_ENV); return src('js/env.js') .on('end', done);&#125;);//gulp scsstask('scss', (done) =&gt; &#123; return src([ 'scss/**/*.scss', '!./scss/import/**/*.scss', ]) .pipe(sourcemaps.init()) .pipe(sass()) .pipe(autoprefixer()) .pipe(sourcemaps.write('./')) .pipe(dest('css')) .on('end', done);&#125;);// gulp libtask('lib', (done) =&gt; &#123; return src([ './node_modules/echarts/dist/echarts.min.js', './node_modules/select2/dist/js/*2.min.js', './node_modules/select2/dist/css/*2.min.css', ]) .pipe(dest('js/lib')) .on('end', done)&#125;);//gulp fontsvar options = &#123;&#125;;task('fonts', function () &#123; return src('./fonts.list') .pipe(googleWebFonts(options)) .pipe(dest('fonts')) .on('end', done);&#125;);//gulp watchtask('watch', () =&gt; &#123; watch(['scss/**/*.scss'], series('scss'));&#125;);//gulp scss:watchtask('scss:watch', (done) =&gt; &#123; watch(['scss/**/*.scss'], series('scss')).on('end', done);&#125;); gulp font, 先创建fonts.list文件(与gulpfile.js同级)12// Google FontOpen Sans:300,400,600,700]]></content>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack性能优化--产出代码]]></title>
    <url>%2F2021%2F05%2F25%2Fwebpack2%2F</url>
    <content type="text"><![CDATA[webpack性能优化–产出代码体积更小合理分包,不重复加载速度更快, 内存使用更少 小图片base64编码比较小的图片用base64 格式产,没必要做网络请求123456789101112131415161718192021222324module.exports = &#123; module: &#123; rules: [ #// 图片 - 考虑 base64 编码的情况 &#123; test: /\.(png|jpg|jpeg|gif)$/, use: &#123; loader: 'url-loader', options: &#123; #// 小于 5kb 的图片用 base64 格式产出 #// 否则，依然延用 file-loader 的形式，产出 url 格式 limit: 5 * 1024, #// 打包到 img 目录下 outputPath: '/img1/', #// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源） #// publicPath: 'http://cdn.abc.com' &#125; &#125; &#125;, ] &#125;,&#125;) bundle加hash内容变了hash就会变,缓存失效请求新的文件, 反之,文件名不变,用缓存1234567module.exports = &#123; output: &#123; filename: 'bundle.[contentHash:8].js', #// 打包代码时，加上 hash 戳 path: distPath, #// publicPath: 'http://cdn.abc.com' #// 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到 &#125;,&#125; 懒加载import加载文件,和vue, react方式道理相同.异步加载JSindex.js:1234567// 引入动态数据 - dynamic-data.js文件, webpack默认支持的方式setTimeout(() =&gt;&#123; // vue react 异步组件 import('./dynamic-data.js').then(res =&gt; &#123; console.log(res.default.message); #// 注意这里的default &#125;)&#125;,1500); 提取公共代码webpack.prod.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960const path = require('path')const webpack = require('webpack')const &#123; smart &#125; = require('webpack-merge')const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin')const MiniCssExtractPlugin = require('mini-css-extract-plugin')const TerserJSPlugin = require('terser-webpack-plugin')const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')const webpackCommonConf = require('./webpack.common.js')const &#123; srcPath, distPath &#125; = require('./paths')module.exports = smart(webpackCommonConf, &#123; mode: 'production', output: &#123; ... &#125;, module: &#123; rules: [ #// 图片 - 考虑 base64 编码的情况 #// 抽离 css ] &#125;, plugins: [ ... ], optimization: &#123; #// 压缩 css minimizer: [new TerserJSPlugin(&#123;&#125;), new OptimizeCSSAssetsPlugin(&#123;&#125;)], #// 分割代码块 splitChunks: &#123; chunks: 'all', #/** # * initial 入口 chunk，对于异步导入的文件不处理 # async 异步 chunk，只对异步导入的文件处理 # all 全部 chunk # */ #// 缓存分组 cacheGroups: &#123; #// 第三方模块 vendor: &#123; name: 'vendor', #// chunk 名称 priority: 1, #// 权限更高，优先抽离，重要！！！ test: /node_modules/, minSize: 0, #// 大小限制 minChunks: 1 #// 最少复用过几次 &#125;, #// 公共的模块 common: &#123; name: 'common', #// chunk 名称 priority: 0, #// 优先级 minSize: 0, #// 公共模块的大小限制 minChunks: 2 #// 公共模块最少复用过几次 &#125; &#125; &#125; &#125;&#125;) IgnorePlugin避免引入插件中的某些包,(直接不引入,代码中没有)ignore-plugin 例:引入moment 获取日期插件,默认会引入所有的语言JS代码,代码过大,如何只引入中文 ?index.js12345import moment form 'moment' #//引入moment插件import 'moment/locale/zh-cn' #//手动引入中文语言包moment.locale('zh-cn'); #设置语言为中文console.log(moment().format('ll')); #2020年X月X日 webpack.common.js123456module.exports = &#123; plugins: [ #// 忽略 moment 下的 /locale 目录,(忽略所有的语言包) new webpack.IgnorePlugin(/\.\/locale/, /moment/), ],&#125; 使用CDN加速1.webpack配置CDN地址;(用于js, css, 图片路径)webpack.prod.js123456789101112131415161718192021222324252627282930module.exports = smart(webpackCommonConf, &#123; mode: 'production', output: &#123; filename: '[name].[contentHash:8].js', #// name 即多入口时 entry 的 key path: distPath, #//1. publicPath 修改所有静态文件 url 的前缀（如 cdn 域名）http://cdn.xxx.com是CDN服务器域名 publicPath: 'http://cdn.xxx.com' &#125;, module: &#123; rules: [ #// 图片 - 考虑 base64 编码的情况 &#123; test: /\.(png|jpg|jpeg|gif)$/, use: &#123; loader: 'url-loader', options: &#123; #// 小于 5kb 的图片用 base64 格式产出 #/ 否则，依然延用 file-loader 的形式，产出 url 格式 limit: 5 * 1024, #// 打包到 img 目录下 outputPath: '/img1/', #// 1. 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源） publicPath: 'http://cdn.xxx.com' &#125; &#125; &#125;, ] &#125;&#125; npm run build 生成后, 引入文件路径加了http://cdn.xxx.com/index.js12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;webpack demo&lt;/title&gt;&lt;link href="http://cdn.xxx.com/css/main.28b49fd4.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;webpack demo&lt;/p&gt; &lt;input type="text"/&gt;&lt;script type="text/javascript" src="http://cdn.abc.com/common.87047fb9.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="http://cdn.xxx.com/index.9c930570.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 把dish文件夹里的东西放到CDN服务器上去让http://cdn.abc.com/common.87047fb9.js,http://cdn.xxx.com/css/main.28b49fd4.css …..是可访问的 使用production配置:webpack.prod.js12345678module.exports = smart(webpackCommonConf, &#123; mode: 'production', # 1. 不用做任何配置,就会自动开启代码压缩;(development环境不压缩代码) # 2. Vue React等会自动删除调试代码(如开发环境的warning); # 3. 启动Tree-Shaking (例:js文件里没有用到的函数,会自动删除,只编译有用到的) #// 必须用ES6 Module 才能让 tree-shaking生效, commonjs 就不行. ...｝ Tree-Shaking作用1. math.js:12345678910export const sum = (a, b) =&gt; &#123; return a + b&#125;export const mult = (a, b) =&gt; &#123; return a * b&#125;#// ES6 Module 才能让 tree-shaking 生效#// commonjs 就不行 ES6 Module和 commonjs区别 ES6 Module 静态引入,编译时引入 commonjs 动态引入,执行时引入 只有ES6 Module 才能静态分析,实现Tree-Shaking commonjs动态引入12345let apiList = require('../config/api.js');if(isDev) &#123; # //可以动态引入执行时引下 apiList = require('../config/api_dev.js);&#125; ES6 Module import();1234567# // "js 文件顶部同步的引用" ES6 的 import 是静态引入,打包时引入，即默认都打包在一起。这不是异步引入.import apiList from('../config/api.js'); if(isDev) &#123; # //这里的import()是动态引入，做异步,语法不允许, 编译时报错,只能静态引入; import apiList from('../config/api_dev.js);&#125; 2. index.js引入math.js,只用到sum,没有用到multmode: ‘production’, 启动Tree-Shaking,编译后的文件里没有mult,(而development, 编译后的文件里有mult).123456789#// 引入 cssimport './style/style1.css'import './style/style2.less'#// 引入 math.jsimport &#123; sum &#125; from './math'const sumRes = sum(10, 20)console.log('sumRes', sumRes) 3.css-tree-shakingpurifycss-webpack：移除没有使用到css样式安装 npm install purifycss-webpack purifycss –save-dev1234567891011121314151617181920212223const MiniCssExtractPlugin = require('mini-css-extract-plugin');const PurifyCSSPlugin = require('purifycss-webpack');const path = require('path');const glob = require('glob') module.exports = &#123; module: &#123; rules: [ &#123; test: /\.css$/, use: [MiniCssExtractPlugin.loader,'css-loader'] &#125; ] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: '[name].css' &#125;), new PurifyCSSPlugin(&#123; paths: glob.sync(path.join(__dirname, './*.html')) &#125;) ]&#125; Scope Hosting打包多个函数合并成1个函数 代码体积更小 创建函数作用域更少 代码可读性更好 配置12345678910111213ModuleConcatenationPlugin = require('webpack/lib/optimize/ModuleConcatenationPlugin');module.exports = &#123; resolve: &#123; # //针对 NPM 中的第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法的文件 mainFields: ['jsnext:main', 'browser', 'main'] &#125;, plugins: [ # // 开启 Scope Hoisting new ModuleConcatenationPlugin(), ]&#125;#webpack5,ModuleConcatenationPlugin 废弃，由 optimization.concatenateModules 替代，生产环境默认开启 效果 module,2个js文件 123456# hello.jsexport default 'Hello'# main.jsimport str from './hello.js'console.log(str); 默认打包结果 123456789101112[ #第1个函数 (function (module, _webpack_exports_, _webpack_require_) &#123; ....... console.log(......) &#125;), #第2个函数 (function (module, _webpack_exports_, _webpack_require_) &#123; ....... _webpack_exports_["a"] = ('Hello'); &#125;)] 开启 Scope Hoisting 打包结果 123456[ #多个函数合并成1个函数 (function (module, _webpack_exports_, _webpack_require_) &#123; var hello = ('Hello'); console.log(hello); &#125;),]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hover时向上动画:transform]]></title>
    <url>%2F2021%2F04%2F25%2Fcss-transform%2F</url>
    <content type="text"><![CDATA[hover时向上动画:transform: translateY(-10px):12345678910111213141516171819.col-md-6 .item &#123; display: block; background: #FDEBEC; padding: 10px 20px 15px 20px; border-radius: 5px; -webkit-transition: all 0.2s ease-in-out; -o-transition: all 0.2s ease-in-out; transition: all 0.2s ease-in-out;&#125;.col-md-6:hover .item &#123; -webkit-transform: scale(1.02); -ms-transform: scale(1.02); transform: scale(1.02); -webkit-box-shadow: 4px 10px 8px rgb(0 0 0 / 30%); box-shadow: 4px 10px 8px rgb(0 0 0 / 30%); -webkit-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px);&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack性能优化--构建速度]]></title>
    <url>%2F2021%2F04%2F25%2Fwebpack1%2F</url>
    <content type="text"><![CDATA[webpack优化构建速度(是否可用于生产环境)可用于生产环境优化bable-loaderIgnorePluginnoParsehappyPackParalleIUglifyPlugin 不可用于生产环境自动刷新热更新DIIPlugin 优化 babel-loader(编译ES6到ES5)1234567&#123; test: /\.js$/, use: [loader: 'babel-loader?cacheDirectory' ], #//开启缓存 include: path.resolve(_dirname, 'src'), # // 明确范围 # // exclude: /(node_modules|bower_components)/, //排除 #// 排除范围include和exclude两者选一个即可 &#125;, IgnorePlugin (避免引入插件中的某些包), 直接不引入,代码中没有例: moment 获取日期插件引入moment插件,默认会引入所有的语言JS代码,代码过大,如何只引入中文 ?index.js12345import moment form 'moment' #//引入moment插件import 'moment/locale/zh-cn' #//手动引入中文语言包moment.locale('zh-cn'); #设置语言为中文console.log(moment().format('ll')); #2020年X月X日 webpack.common.js123456module.exports = &#123; plugins: [ #// 忽略 moment 下的 /locale 目录,(忽略所有的语言包) new webpack.IgnorePlugin(/\.\/locale/, /moment/), ],&#125; noParse ( 引入，避免打包),只引入,不打包webpack.common.js1234567module.exports = &#123; module: &#123; #// 独完整的'react.min.js' 文件就没有采用模块化 #// 忽略对'react.min.js' 文件的递归解析处理 noParse: [/react\.min\.js$/], &#125;&#125; happyPack ( 多进程打包工具,打包更快)JS单线程,开启多进程打包提高构建速度 (特别是多核CPU)webpack.common.js123456789101112131415161718192021222324const HappyPack = require('happypack');module.exports = &#123; module: &#123; rules: [ #// js &#123; test: /\.js$/, #// 把对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例 use: ['happypack/loader?id=babel'], include: srcPath, #// exclude: /node_modules/ &#125;, ] &#125;, plugins: [ #// happyPack 开启多进程打包 new HappyPack(&#123; #// 用唯一的标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件 id: 'babel', #// 如何处理 .js 文件，用法和 Loader 配置中一样 loaders: ['babel-loader?cacheDirectory'] &#125;), ]&#125; happypack 已经不再维护了, 可用thread-loader ParallelUglifyPlugin ( 多进程代码压缩JS)webpack 内置Uglify工具压缩JSJS单线程, 开启多进程压缩更快webpack.common.js1234567891011121314151617181920212223242526272829const ParallelUglifyPlugin = require('webpack-parallel-uglify-plugin');module.exports = &#123; module: &#123; rules: [ ... ] &#125;, plugins: [ #// 使用 ParallelUglifyPlugin 并行压缩输出的 JS 代码 new ParallelUglifyPlugin(&#123; #// 传递给 UglifyJS 的参数 #// （还是使用 UglifyJS 压缩，只不过帮助开启了多进程） uglifyJS: &#123; output: &#123; beautify: false, // 最紧凑的输出 comments: false, // 删除所有的注释 &#125;, compress: &#123; #// 删除所有的 `console` 语句，可以兼容ie浏览器 drop_console: true, #// 内嵌定义了但是只用到一次的变量 collapse_vars: true, #// 提取出出现多次但是没有定义成变量去引用的静态值 reduce_vars: true, &#125; &#125; &#125;) ]&#125; 关于开启多进程 项目较大,打包较慢,开启多进程能提高速度; 项目较小,打包很快,开启多进程会降低速度(进程开销). 按需使用. 自动刷新 ( 一保存代码,编译完之后浏览器就自动刷新页面)watch监听配置watch:true只是开启了webpack的监听模式，文件改变会触发事件,(一般情况不会用).webpack.dev.js123456789101112131415module.exports = &#123; watch: true, #//开启监听, 默认为false # // 注意,开启监听之后webpack-dev-server会自动开启刷新浏览器!!! # // 监听配置 watchOptions: &#123; ignored: /node_modules/, # //忽略哪些 # // 监听到变化发生后会等300ms再去执行动作, 防止文件更新太快导致重新编译频率太高 aggregateTimeout: 300, #//默认为300ms #// 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的 poll: 1000 #//默认每隔1000毫秒询问一次 &#125;｝ devServer 把webpack-dev-server会自动开启刷新浏览器带上,不用再去配watchdevServer只是类似监听了这些事件，注册回调函数（比如刷新浏览器）webpack.dev.js123456789101112131415161718192021222324module.exports = smart(webpackCommonConf, &#123; mode: 'development', devServer: &#123; port: 8080, progress: true, #// 显示打包的进度条 contentBase: distPath, #// 根目录 open: true, #// 自动打开浏览器 compress: true, #// 启动 gzip 压缩 #// 设置代理 proxy: &#123; #// 将本地 /api/xxx 代理到 localhost:3000/api/xxx '/api': 'http://localhost:3000', #// 将本地 /api2/xxx 代理到 localhost:3000/xxx '/api2': &#123; target: 'http://localhost:3000', pathRewrite: &#123; '/api2': '' &#125; &#125; &#125; &#125;&#125; 热更新 ( 一保存代码,编译完之后浏览器不用刷新页面,代码就已更新)HotModuleReplacementPlugin index引入变化: dev-server, 引用HotModuleReplacementPlugin插件 设置hot,告诉devServer热更新已开启 设置热更新的范围(配置热更新哪些文件,及更新后的处理事件)如果网页自动刷新能够用,就没必要开启热更新,如果网页刷新比较慢,会引响开发,才会去用热更新 webpack.dev.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849const HotModuleReplacementPlugin = require('webpack/lib/HotModuleReplacementPlugin');module.exports = smart(webpackCommonConf, &#123; mode: 'development', entry: &#123; #// index: path.join(srcPath, 'index.js'), 之前的引入方法 # // 1. index引入变化: dev-server, index: [ 'webpack-dev-server/client?http://localhost:8080/', # // http://localhost:8080, 是本地local网址 'webpack/hot/dev-server', path.join(srcPath, 'index.js') ], other: path.join(srcPath, 'other.js') &#125;, plugins: [ new webpack.DefinePlugin(&#123; // window.ENV = 'production' ENV: JSON.stringify('development') &#125;), # // 2. 引用HotModuleReplacementPlugin插件 new HotModuleReplacementPlugin() ], devServer: &#123; port: 8080, progress: true, #// 显示打包的进度条 contentBase: distPath, #// 根目录 open: true, #// 自动打开浏览器 compress: true, #// 启动 gzip 压缩 # // 3. 设置hot,告诉devServer热更新已开启 hot: true, proxy: &#123; ... &#125; &#125;,&#125;index.js`````` bash# // 4. 设置热更新的范围math.jsimport &#123; sum &#125; from './math'# // 增加，开启热更新之后的代码逻辑if (module.hot) &#123; module.hot.accept(['./math'], () =&gt; &#123; const sumRes = sum(10, 30) console.log('sumRes in hot', sumRes) &#125;) &#125; DIIPlugin 动态链接库插件把第三方插件事先打包好,做为DIL,之后打包时引用它,不需要每次打包都去打包第三方插件 使用背景: 前端框架如vue React, 体积大,构建慢 较稳定,不常升级版本 同一个版本只构建一次即可,不用每次都重新构建 使用webpack已内置DIIPlugin支持DIIPlugin - 打包出dII文件DIIReferencePlugin - 使用 dII文件 webpack.dll.js (DIIPlugin - 打包出dII文件)123456789101112131415161718192021222324252627282930313233const path = require('path')const DllPlugin = require('webpack/lib/DllPlugin')const &#123; srcPath, distPath &#125; = require('./paths')module.exports = &#123; mode: 'development', #// JS 执行入口文件 entry: &#123; #// 把 React 相关模块的放到一个单独的动态链接库 react: ['react', 'react-dom'] &#125;, output: &#123; #// 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称， #// 也就是 entry 中配置的 react 和 polyfill filename: '[name].dll.js', #// 输出的文件都放到 dist 目录下 path: distPath, #// 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react #// 之所以在前面加上 _dll_ 是为了防止全局变量冲突,(例: 打包出来生成的文件react. dII.js里面会有全局部变量名_dll_react) library: '_dll_[name]', &#125;, plugins: [ #// 接入 DllPlugin new DllPlugin(&#123; #// 动态链接库的全局变量名称，需要和 output.library 中保持一致 #// 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值 #// 例如 react.manifest.json 中就有 "name": "_dll_react" name: '_dll_[name]', #// 描述动态链接库的 manifest.json 文件输出时的文件名称 path: path.join(distPath, '[name].manifest.json'), &#125;), ],&#125; 引入引入react.dll.jsindex.html1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="root"&gt;&lt;/div&gt; &lt;script src="./react.dll.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 配置地址react.manifest.jsonwebpack.dev.js (DIIReferencePlugin - 使用 dII文件)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const path = require('path')const webpack = require('webpack')const &#123; merge &#125; = require('webpack-merge')const webpackCommonConf = require('./webpack.common.js')const &#123; srcPath, distPath &#125; = require('./paths')#// 第一，引入 DllReferencePluginconst DllReferencePlugin = require('webpack/lib/DllReferencePlugin');module.exports = merge(webpackCommonConf, &#123; mode: 'development', module: &#123; rules: [ &#123; test: /\.js$/, use: ['babel-loader'], include: srcPath, exclude: /node_modules/ #// 第二，不要再转换 node_modules 的代码 &#125;, ] &#125;, plugins: [ new webpack.DefinePlugin(&#123; #// window.ENV = 'production' ENV: JSON.stringify('development') &#125;), #// 第三，告诉 Webpack 使用了哪些动态链接库 new DllReferencePlugin(&#123; #// 描述 react 动态链接库的文件内容 manifest: require(path.join(distPath, 'react.manifest.json')), &#125;), ], devServer: &#123; port: 8080, progress: true, // 显示打包的进度条 contentBase: distPath, // 根目录 open: true, // 自动打开浏览器 compress: true, // 启动 gzip 压缩 #// 设置代理 proxy: &#123; #// 将本地 /api/xxx 代理到 localhost:3000/api/xxx '/api': 'http://localhost:3000', #// 将本地 /api2/xxx 代理到 localhost:3000/xxx '/api2': &#123; target: 'http://localhost:3000', pathRewrite: &#123; '/api2': '' &#125; &#125; &#125; &#125;&#125;)]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[transition过滤]]></title>
    <url>%2F2021%2F03%2F25%2Fcss-transition%E8%BF%87%E6%BB%A4%2F</url>
    <content type="text"><![CDATA[transition过渡;12345678910111213141516171819202122232425262728293031321. transition margin : a &#123; transition: margin .2s;/* 指定margin过渡２秒 */ /*transition:all .2s; 指定所有过渡２秒 */ &#125;2. transition hover放大1.5倍：scale(1.5).icon-close&#123; @include positionImg(absolute,23px,25px,14px,14px,'/imgs/icon-close.png'); transition: transform .3s; &amp;:hover&#123; transform: scale(1.5); &#125;&#125;3.transition: all 0.3s ease-out;4.transition: all 0.3s linear 0s;5.transition: all 0.3s linear; 6.transition:all 0.3s ease-in-out;7.背景过渡transition: background-color 0.3s linear;8.背景渐变background: linear-gradient(top, #a9db80 0%, #96c56f 100%); 边框背景字颜色都延迟３秒：transition: border-color 0.3s, background-color 0.3s, color 0.3s;1234567891011121314151617.form-submit &#123; width: 100px; border: 2px solid #999; text-align: center; line-height: 55px; height: 55px; cursor: pointer; transition: border-color 0.3s, background-color 0.3s, color 0.3s;&#125;.form-submit:hover,.form-submit:focus &#123; color: #fff; border-color: #bf0000; background-color: #bf0000; &#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片按比例设置]]></title>
    <url>%2F2021%2F02%2F25%2Fcss3-img-fit%2F</url>
    <content type="text"><![CDATA[图片按比例设置:12345678910111213141516171819202122232425262728293031323334353637383940mixin img-fit() &#123; object-fit: cover; object-position: 50% 50%; // font-family: 'object-fit: cover; object-position: 50% 50%'; width: 100%; height: 100%;&#125;%img-fit &#123; @include img-fit();&#125;.responsive-media &#123; display: block; overflow: hidden; padding: 0; position: relative; background: transparent; z-index: 1; img, picture, iframe, embed, object, video &#123; @extend %img-fit; position: absolute; top: 0; left: 0; z-index: 1; &#125;&#125;@mixin responsive-ratio($x,$y) &#123; height: 0; padding-bottom: percentage($y / $x);&#125;.responsive-media&#123;@include responsive-ratio(2, 3);//图片２：3&#125; 如果知道一张图片的宽高比，图片大小随屏幕缩放:1234567891011121314图片父元素用padding-bottom撑开高度，然后图片可以height 100%, 再用上object-fit: cover;.parent &#123; position: relative; margin: 0 auto; padding-bottom: 60%;&#125;.parent img&#123; position: absolute; height: 100%; width: 100%; object-fit: cover;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[input css]]></title>
    <url>%2F2021%2F02%2F25%2Fcss3-input%2F</url>
    <content type="text"><![CDATA[input placeholder@mixin input { width: 100%; border: none; outline: none; border-radius: 0; appearance: none; background: none; font-size: 14px; color: $primary; border-bottom: 2px solid $blue; padding: 4px 8px; #// 去掉浏览器自带的填充时的背景色 &amp;:-internal-autofill-previewed, &amp;:-internal-autofill-selected { -webkit-text-fill-color: $primary; transition: background-color 5000s ease-out 0.5s; } &amp;.error { color: $red; } } input placeholderinput::placeholder { color: $grey; }]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mask-image 灰色hover时是彩色, linear-gradient 线性渐变创建图像]]></title>
    <url>%2F2021%2F02%2F24%2Fcss3-mask-image%2F</url>
    <content type="text"><![CDATA[1.svg做背景，默认是灰色，hover时是彩色:12345678910111213141516.logo &#123; display:inline-block; width: 66px; height: 25px; background-color: gray; mask-image: url(../images/logo.svg); mask-position: center bottom; mask-repeat: no-repeat;&#125;&amp;:hover,&amp;:focus &#123; .logo &#123; background-color: #00297a; &#125;&#125; 半透明背景:我只是文字 12345.form &#123; border-radius: 20px; overflow: hidden; background: linear-gradient(rgba(84,74,90,0.8),rgba(84,74,90,0.8)),url(/img/flex.png) no-repeat 50% 50%/cover;&#125; 图片圆形加右边:after的底边: 123456789101112131415161718192021222324252627282930313233.faculty-img a &#123; display: inline-block; position: relative; z-index: 1; width: 100%; height: 0; padding-bottom: 100%; border-radius: 50%; overflow: hidden; -webkit-mask-image: -webkit-radial-gradient(white,black);&#125;.faculty-img a img &#123; transition: all 0.4s ease-out; position: absolute; left: 0; top: 0; width: 100%; height: 100%; object-fit: cover; font-family: 'object-fit: cover;';&#125;.faculty-img::after &#123; position: absolute; top: 2%; content: ""; display: inline-block; width: 100%; height: 95%; z-index: 0; right: -5%; border-radius: 50%; background-color: #9D6C98;&#125; 2.mask-image + linear-gradient 优雅显示文本过长线性渐变创建图像:下拉 12mask-image： CSS中的mask属性允许用户屏蔽或剪裁特定点的图像来实现，部分或完全隐藏某个元素的可见性。linear-gradient：用线性渐变创建图像。 html dom结构12345678910&lt;div class="mask-image-linear-gradient"&gt; &lt;div class="mask-image-linear-gradient__words"&gt; &lt;p&gt;线性渐变创建图像:&lt;/p&gt; &lt;p style="text-align: center"&gt;&lt;img style="max-width:100%;" src="/img/flex.png"/&gt;&lt;/p&gt;下拉&lt;p&gt;&lt;br/&gt;&lt;/p&gt; &lt;/div&gt; &lt;img v-if="isShowOpen" :src="isOpen?'open.png':'close.png'" class="icon icon--open-all" @click="tapOpenAll" /&gt;&lt;/div&gt; css实现方式 [ 部分 ]: 12345678910111213141516 .mask-image-linear-gradient &#123; // 外层div样式 &amp;__words &#123; height: 150px; overflow: hidden; -webkit-mask-image: linear-gradient(#1a1a1a 55%, transparent); mask-image: linear-gradient(#1a1a1a 55%, transparent); -webkit-mask-size: 100% 100%; mask-size: 100% 100%; &#125; // 打开时候不显示mask &amp;.open &#123; mask-image: none; -webkit-mask-image: none; &#125;&#125; 关键css:12mask-image: linear-gradient(#1a1a1a 55%, transparent);mask-size: 100% 100%;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3-2021杂项]]></title>
    <url>%2F2021%2F02%2F10%2Fcss3-2021%2F</url>
    <content type="text"><![CDATA[背景有透明度％:1background-color: #55585a7a;//可以google浏览器开发才工具调 左窄右宽的边框做背景:123.polygon-top::before &#123; border-width: 1.5rem 50vw 1.5rem 50vw;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[google开发者工具截图]]></title>
    <url>%2F2021%2F02%2F09%2Fgoogle-screenshot%2F</url>
    <content type="text"><![CDATA[截整张网页的图：1231. 打google浏览器开发者工具2. ctrl+shift+p 输入capture 3.选择：Screenshot Capture full size screenshot]]></content>
      <tags>
        <tag>开发者工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-跨域方法]]></title>
    <url>%2F2021%2F01%2F27%2Fhexo-%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[hexo 跨域方法案例demo 1.安装http-proxy-middleware：1npm install --save-dev http-proxy-middleware 2.新增文件 themes/landscape/scripts/http_proxy_middleware.js:1234567891011121314const &#123; createProxyMiddleware &#125; = require('http-proxy-middleware');const apiProxy = createProxyMiddleware('/api', &#123; target: 'http://baidu.com', changeOrigin: true, pathRewrite: &#123; '^/api/': '/', // rewrite path 将链接中的 /api/ 替换为 '/' &#125;,&#125;);hexo.extend.filter.register('server_middleware', function(app)&#123; // 表示以 api 开头的请求将被转发 app.use('/api', apiProxy);&#125;); 3.重启项目即可hexo server，出现以下信息表示配置成功：12[HPM] Proxy created: /api -&gt; http://baidu.com[HPM] Proxy rewrite rule created: "^/api/" ~&gt; "/"]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 指定从其他分支拉取(复制)commit,git cherry-pick]]></title>
    <url>%2F2020%2F12%2F25%2Fgit-cherry-pick%2F</url>
    <content type="text"><![CDATA[git cherry-pick 复制commit1git cherry-pick c677c62e58baa]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[主题界面的暗/光模式开关 prefers-color-scheme]]></title>
    <url>%2F2020%2F12%2F20%2Fcss-prefers-color-scheme%2F</url>
    <content type="text"><![CDATA[一个暗/光模式开关prefers-color-scheme:light表示用户已告知系统他们选择使用浅色主题的界面。dark表示用户已告知系统他们选择使用暗色主题的界面。译者注：“未得知”、“已告知”等用语，英文原文如此。“未得知”可理解为：浏览器的宿主系统不支持设置主题色，或者支持主题色并默认为/被设为了未设置/无偏好。“已告知”为：浏览器的宿主系统支持设置主题色，且被设置为了亮色或者暗色。 目前，若结果为 no-preference，无法通过此媒体特性获知宿主系统是否支持设置主题色，或者用户是否主动将其设置为无偏好。出于隐私保护等方面的考虑，用户或用户代理也可能在一些情况下在浏览器内部将其设置为 no-preference。 1234567891011121314151617181920212223242526272829样例这个例子使用了一个有黑色背景和白色文字的元素，当用户使用浅色主题时，会翻转黑白颜色。:root &#123; --foreground: #111; --background: #f8f8f8;&#125;@media (prefers-color-scheme: light) &#123; :root &#123; --foreground: #fff; --background: blue; &#125;&#125;@media (prefers-color-scheme: dark) &#123; :root &#123; --foreground: #f8f8f8; --background: #111; &#125;&#125;body &#123; font-family: helvetica, sans-serif; color: var(--foreground); background: var(--background);&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git rebase --continue 解决冲突后代码合并]]></title>
    <url>%2F2020%2F11%2F25%2Fgit-rebase-continue%2F</url>
    <content type="text"><![CDATA[解决冲突,代码合并1234git rebase develop解决冲突后:git add 冲突修改的文件git rebase --continue 如果git rebase –continue退不出来,关闭窗口,再执行:12345git config core.editor vimgit rebase --continue按Esc:wq回车]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git reset 撤下commit或push]]></title>
    <url>%2F2020%2F06%2F22%2Fgit-reset-hard%2F</url>
    <content type="text"><![CDATA[取消commit, (未push)1git reset a517075c66 // a517075c66为commit之前的提交ID 撤下上1次push提交,不留历史记录(记得备份)1231. git log 2. git reset --hard a517075c66cec4f44c336//回退到a517075c66cec4f44c336版本, 这一步之前一定要保存好文件，之后就什么都没有了3. git push origin feature/CITC-99 -f //强制push &lt;&gt; -f,不强推会冲突，推不上，必须强推 git reset –hard ID之后,本地文件清空找回方法(如果之前每次提交之前都有git stash的话，按以下步骤可以找回)12345671. git fsck --lost-found2. 找到“悬空 commit ID”，忽略“悬空 blob”，3. git show 7480ed4bba，从上到下，一个个ID找下去，直到找到文件为止4. 找到后，git merge 7480ed4bba, 退出5. git stash，再次备份文件，把文件重命名，使git reset --hard后不被丢失6. 再次git reset --hard 6bd3af08e008ff 恢复到撤消之前的代码，无影无踪；7. 手动把备份的文件恢复]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack基本配置]]></title>
    <url>%2F2020%2F04%2F25%2Fwebpack-config%2F</url>
    <content type="text"><![CDATA[webpack配置webpack 文档 webpack基本配置安装:12345npm install --save-dev webpack webpack-cli webpack-merge sass-loader node-sass css-loader postcss-loader mini-css-extract-plugin babel-loader autoprefixer @babel/preset-env @babel/core @babel/plugin-syntax-dynamic-import ......# 或指定版本npm install --save-dev webpack@&lt;version&gt; package.json:123456789101112131415161718192021222324252627282930313233343536373839&#123; "name": "webpack5-demo", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1", "dev-without-dev-server": "webpack --config build/webpack.dev.js", "dev": "webpack serve --config build/webpack.dev.js", "build": "webpack --config build/webpack.prod.js" &#125;, "keywords": [], "author": "", "license": "ISC", "devDependencies": &#123; "@babel/core": "^7.16.7", "@babel/preset-env": "^7.16.8", "autoprefixer": "^10.1.0", "babel-loader": "^8.2.3", "clean-webpack-plugin": "^3.0.0", "file-loader": "^6.2.0", "html-webpack-plugin": "^4.5.0", "mini-css-extract-plugin": "^2.4.6", "optimize-css-assets-webpack-plugin": "^5.0.4", "postcss-loader": "^6.2.1", "css-loader": "^6.5.1", "node-sass": "^7.0.1", "sass-loader": "^12.4.0", "style-loader": "^3.3.1", "terser-webpack-plugin": "^5.0.3", "url-loader": "^4.1.1", "webpack": "^5.65.0", "webpack-cli": "^4.9.1", "webpack-merge": "^5.8.0", &#125;, "dependencies": &#123; "lodash": "^4.17.20" &#125;&#125; 折分配置和merge1.文件: webpack.common.js / webpack.dev.js / webpack.pord.js 2.通过merge把common.js引入到dev.js和pord.js中;123456const &#123; merge &#125; = require('webpack-merge');const common = require('./webpack.common');module.exports = merge(common, &#123; mode: 'production',&#125;); webpack.common.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const path = require('path')const HtmlWebpackPlugin = require('html-webpack-plugin')const &#123; srcPath, distPath &#125; = require('./paths')module.exports = &#123; entry: path.join(srcPath, 'index'), module: &#123; rules: [ #// 处理ES6 &#123; test: /\.js$/, loader: ['babel-loader'], include: srcPath, exclude: /node_modules/ #//排除node_modules文件夹 &#125;, # // &#123; # // test: /\.vue$/, # // loader: ['vue-loader'], # // include: srcPath # // &#125;, &#123; test: /\.css$/, #// loader 的执行顺序是：从后往前 loader: ['style-loader', 'css-loader', 'postcss-loader'] #// 加了 postcss &#125;, &#123; test: /\.less$/, #// 增加 'less-loader' ，注意顺序 loader: ['style-loader', 'css-loader', 'less-loader'] &#125;, # // 直接引入图片 url # //&#123; # // test: /\.(png|jpg|jpeg|gif)$/, # // use: 'file-loader' # //&#125;， # // 图片 - 考虑 base64 编码的情况 &#123; test: /\.(png|jpg|jpeg|gif)$/, use: &#123; loader: 'url-loader', options: &#123; #// 小于 5kb 的图片用 base64 格式产出 #// 否则，依然延用 file-loader 的形式，产出 url 格式 limit: 5 * 1024, #// 打包到 img 目录下 outputPath: '/img1/', #// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源） #// publicPath: 'http://cdn.abc.com' &#125; &#125; &#125;, ] &#125;, plugins: [ #// 生成 index.html new HtmlWebpackPlugin(&#123; template: path.join(srcPath, 'index.html'), filename: 'index.html' &#125;) ]&#125; paths.js123456789const path = require('path')const srcPath = path.join(__dirname, '..', 'src')const distPath = path.join(__dirname, '..', 'dist')module.exports = &#123; srcPath, distPath&#125; webpack.dev.js123456789101112131415161718192021222324252627282930313233343536const path = require('path')const webpack = require('webpack')const webpackCommonConf = require('./webpack.common.js')const &#123; merge &#125; = require('webpack-merge')const &#123; srcPath, distPath &#125; = require('./paths')module.exports = merge(webpackCommonConf, &#123; mode: 'development', plugins: [ new webpack.DefinePlugin(&#123; #// window.ENV = 'development' ENV: JSON.stringify('development') &#125;) ], devServer: &#123; port: 8080, progress: true, #// 显示打包的进度条 contentBase: distPath, #// 根目录 open: true, #// 自动打开浏览器 compress: true, #// 启动 gzip 压缩 #// 设置代理(2种方式) proxy: &#123; # //1. 将本地 /api/xxx 代理到 localhost:3000/api/xxx '/api': 'http://localhost:3000', #//2. 将本地 /api2/xxx 代理到 localhost:3000/xxx '/api2': &#123; target: 'http://localhost:3000', pathRewrite: &#123; '/api2': '' &#125; &#125; &#125; &#125;&#125;) webpack.pord.js12345678910111213141516171819202122const path = require('path')const webpack = require('webpack')const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin')const webpackCommonConf = require('./webpack.common.js')const &#123; merge &#125; = require('webpack-merge')const &#123; srcPath, distPath &#125; = require('./paths')module.exports = merge(webpackCommonConf, &#123; mode: 'production', output: &#123; filename: 'bundle.[contenthash:8].js', #// 打包代码时，加上 hash 戳 path: distPath, #// publicPath: 'http://cdn.abc.com' #// 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到 &#125;, plugins: [ new CleanWebpackPlugin(), #// 会默认清空 output.path 文件夹 new webpack.DefinePlugin(&#123; #// window.ENV = 'production' ENV: JSON.stringify('production') &#125;) ]&#125;) 启动本地服务npm run devnpm run build package.json123456"scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1", "devBuild": "webpack --config build/webpack.dev.js", #// webpack文件放在build文件夹 "dev": "webpack-dev-server --config build/webpack.dev.js", "build": "webpack --config build/webpack.prod.js"&#125;, 处理ES6 (编译成ES5,兼容浏览器) loader: [‘babel-loader’] .babelrc: “presets”: [“@babel/preset-env”] webpack.common.js123456&#123; test: /\.js$/, loader: ['babel-loader'], include: srcPath, exclude: /node_modules/ #//排除node_modules文件夹&#125;, .babelrc123&#123; "presets": ["@babel/preset-env"]&#125; 处理CSS 或 SCSSindex.js 引入 css1import './style/style1.css' webpack.common.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546 # // 处理css &#123; test: /\.css$/, loader: [ MiniCssExtractPlugin.loader, #// 注意，这里不再用 style-loader （&lt;style&gt;插入CSS方法); 'css-loader', #// css语法解析 'postcss-loader' #// 浏览器前缀 ] &#125;, # // 处理scss # // const globImporter = require('node-sass-glob-importer'); #//Sass@import语句的工具 &#123; test: /\.scss$/, use: [ MiniCssExtractPlugin.loader, &#123; loader: 'css-loader', options: &#123; url: false, &#125;, &#125;, 'postcss-loader', &#123; loader: 'sass-loader', options: &#123; sassOptions: &#123; importer: globImporter(), &#125;, &#125;, &#125;, ], &#125;, plugins: [ new MiniCssExtractPlugin(), new StyleLintPlugin(&#123; context: 'src', configFile: path.resolve(__dirname, './.stylelintrc.json'), files: ['**/*.scss'], fix: false, cache: true, emitErrors: true, failOnError: false, &#125;), new ESLintPlugin(),], 引用css前缀插件安装autoprefixer： npm install –save-dev autoprefixer引用css前缀插件： postcss.config.js123module.exports = &#123; plugins: [require('autoprefixer')] #// autoprefixer 增加前缀插件&#125; 处理图片12345678910111213141516171819202122232425262728# // 图片 - 考虑 base64 编码的情况&#123; test: /\.(png|jpg|jpeg|gif)$/, use: &#123; loader: 'url-loader', options: &#123; #// 小于 5kb 的图片用 base64 格式产出 #// 否则，依然延用 file-loader 的形式，产出 url 格式 limit: 5 * 1024, #// 大于 5kb打包到 img 目录下 outputPath: '/img1/', #// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源） #// publicPath: 'http://cdn.abc.com' &#125; &#125;&#125;,#// 或url-loader推荐webpack5使用内置的资源模块(asset)：https://webpack.docschina.org/guides/asset-modules/ # //小于8kb输入data URI，否则输出文件路径&#123;test: /\.(png|svg|jpg|gif)$/,type: 'asset',parser: &#123; dataUrlCondition: &#123; maxSize: 8 * 1024, #// 小于 8kb 的图片用 base64 格式产出 &#125;,&#125;, webpack高级配置webpack配置多入口产出多个html页面,每个页面对应一个js文件.(1). entry 入口多个(2). output 输出’[name].js’(3). plugins 生成多个 webpack.common.js:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const path = require('path')const HtmlWebpackPlugin = require('html-webpack-plugin')const &#123; srcPath, distPath &#125; = require('./paths')module.exports = &#123; # //1. 入口 entry: &#123; index: path.join(srcPath, 'index.js'), other: path.join(srcPath, 'other.js') &#125;, # // 2. 输出 output: &#123; filename: '[name].js', # // name 即多入口时 entry 的 key # // filename: '[name].[contentHash:8].js', // 打包代码时，加上 hash 戳, content变了hash变, content不变,hash不变 chunkFilename: '[name].bundle.js', path: distPath, clean: true, &#125;, module: &#123; rules: [ &#123; test: /\.js$/, loader: ['babel-loader'], include: srcPath, exclude: /node_modules/ &#125;, &#123; test: /\.css$/, #// loader 的执行顺序是：从后往前 loader: ['style-loader', 'css-loader', 'postcss-loader'] #// 加了 postcss &#125;, ] &#125;, #// 3. 生成多个,每个实例建一个 plugins: [ # new CleanWebpackPlugin(), #// 会默认清空 output.path (dist)文件夹 #// 多入口 - 生成 index.html new HtmlWebpackPlugin(&#123; template: path.join(srcPath, 'index.html'), filename: 'index.html', #// chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用 chunks: ['index'] #// 只引用 index.js &#125;), #// 多入口 - 生成 other.html new HtmlWebpackPlugin(&#123; template: path.join(srcPath, 'other.html'), filename: 'other.html', chunks: ['other'] #// 只引用 other.js &#125;) ]&#125; webpack如何抽离压缩css文件(1). 用插件加载：MiniCssExtractPlugin(2). plugins里面: new MiniCssExtractPlugin 生成CSS路径(3). optimization 压缩文件(4). 单个js文件里引入所需要的css: import ‘./style/style1.css’ 安装:1npm install --save-dev mini-css-extract-plugin optimize-css-assets-webpack-plugin node-sass-glob-importer webpack.common.js:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374const MiniCssExtractPlugin = require('mini-css-extract-plugin'); #//css提取插件const TerserJSPlugin = require('terser-webpack-plugin'); #//压缩插件const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin') #//压缩和优化CSSconst globImporter = require('node-sass-glob-importer'); #//Sass@import语句的工具module.exports = merge(webpackCommonConf, &#123; mode: 'production', output: &#123; ...... &#125;, module: &#123; rules: [ #// 抽离 css &#123; test: /\.css$/, loader: [ MiniCssExtractPlugin.loader, #// 注意，这里不再用 style-loader （&lt;style&gt;加载CSS方法); 'css-loader', #// css语法解析 'postcss-loader' #// 浏览器前缀 ] &#125;, #// 抽离 less --&gt; css &#123; test: /\.less$/, loader: [ MiniCssExtractPlugin.loader, #// 注意，这里不再用 style-loader 'css-loader', 'less-loader', 'postcss-loader' ] &#125;, #// 抽离 sass --&gt; css &#123; test: /\.scss$/, use: [ MiniCssExtractPlugin.loader, &#123; loader: 'css-loader', options: &#123; url: false, &#125;, &#125;, 'postcss-loader', &#123; loader: 'sass-loader', options: &#123; sassOptions: &#123; importer: globImporter(), &#125;, &#125;, &#125;, ], &#125;, ] &#125;, plugins: [ new CleanWebpackPlugin(), #// 会默认清空 output.path 文件夹 new webpack.DefinePlugin(&#123; #// window.ENV = 'production' ENV: JSON.stringify('production') &#125;), #// 抽离 css 文件 new MiniCssExtractPlugin(&#123; filename: 'css/main.[contentHash:8].css' &#125;) ], optimization: &#123; #// 压缩 css minimizer: [new TerserJSPlugin(&#123;&#125;), new OptimizeCSSAssetsPlugin(&#123;&#125;)], &#125;&#125;) webpack如何抽离公共代码和第三方代码(1). splitChunks分割代码块(2). cacheGroups缓存分组(3). plugins 多入口,chunks配置要引入的模块 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253entry: &#123; index: path.join(srcPath, 'index.js'), other: path.join(srcPath, 'other.js')&#125;, plugins: [ // 多入口 - 生成 index.html new HtmlWebpackPlugin(&#123; template: path.join(srcPath, 'index.html'), filename: 'index.html', // chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用 chunks: ['index', 'vendor', 'common'] #// 要考虑代码分割 &#125;), // 多入口 - 生成 other.html new HtmlWebpackPlugin(&#123; template: path.join(srcPath, 'other.html'), filename: 'other.html', chunks: ['other', 'common'] #// chunks 引用考虑代码分割 &#125;)],optimization: &#123; // 压缩 css minimizer: [new TerserJSPlugin(&#123;&#125;), new OptimizeCSSAssetsPlugin(&#123;&#125;)], // 分割代码块 splitChunks: &#123; chunks: 'all', /** * initial 入口 chunk，对于异步导入的文件不处理 async 异步 chunk，只对异步导入的文件处理 all 全部 chunk */ // 缓存分组 cacheGroups: &#123; // 第三方模块 vendor: &#123; name: 'vendor', #// chunk 名称 priority: 1, #// (数字越大越高)主权限更高，优先抽离，重要！！！ test: /node_modules/, minSize: 0, #// 大小限制 可写..kb minChunks: 1 #// 最少复用过几次 &#125;, // 公共的模块 common: &#123; name: 'common', #// chunk 名称 priority: 0, #// 优先级 minSize: 30kb, #// 公共模块的大小限制 minChunks: 2 #// 公共模块最少复用过几次 &#125; &#125; &#125;&#125; webpack如何实现异步加载JSindex.js:1234567// 引入动态数据 - 懒加载dynamic-data.js文件, webpack默认支持的方式setTimeout(() =&gt;&#123; // vue react 异步组件 import('./dynamic-data.js').then(res =&gt; &#123; console.log(res.default.message); #// 注意这里的default &#125;)&#125;,1500); dynamic-data.js内容123export default &#123; message: 'this is dynamic data'&#125; webpack处理JSx安装@babel/preset-reactbabel-preset-react1npm install --save-dev @babel/preset-react .babelrc123&#123; "presets": ["@babel/preset-react"]&#125; webpack处理Vue安装vue-loader1npm i vue-loader --save-dev webpack.common.jsrules:[]里加上:123456// 与babel-loader同理&#123; test: /\.vue$/, loader: ['vue-loader'], include: srcPath,&#125;, module chunk bundle 的区别module:各个源码文件(图片,JS,CSS…能被引入的文件或文件名), webpack中一切皆模块; chunk:分析多模块合并成一个集合,如:entry import() //文件引入splitChunk // 分割代码块 bundle:最终的输出文件]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[animation动画]]></title>
    <url>%2F2020%2F02%2F25%2Fcss-animation%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[animation 动画:1234567891011121314151617181920212223242526272829303132333435363738@keyframes slideDown&#123;//@keyframes 类名 from&#123; top:-50%; opacity:0; &#125; to&#123; top:50%; opacity:1; &#125; &#125; @keyframes slideUp&#123; from&#123; top:50%; opacity:1; &#125; to&#123; top:-50%; opacity:0; &#125; &#125; .video&#123; position:fixed; top:-50%; left:50%; transform:translate(-50%,-50%); z-index:10; width:1000px; height:536px; opacity:1; &amp;.slideDown&#123; animation:slideDown .6s linear;//linear过度方法 top:50%; &#125; &amp;.slideUp&#123; animation:slideUp .6s linear;//linear过度方法 &#125; &#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 创建.txt文件]]></title>
    <url>%2F2020%2F02%2F09%2FUbuntu%2F</url>
    <content type="text"><![CDATA[Ubuntu 创建.txt文件1231.打开终端并输入 vim xxx.txt2.按esc，输入:wq3.完成了]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js 前端表单验证]]></title>
    <url>%2F2019%2F10%2F31%2Fjs-form-verification%2F</url>
    <content type="text"><![CDATA[常用正则验证表达式手机号验证1234var validate = function(num) &#123; var exp = /^1[3-9]\d&#123;9&#125;$/; return exp.test(num);&#125;; 身份证号验证1var exp = /^[1-9]&#123;1&#125;[0-9]&#123;14&#125;$|^[1-9]&#123;1&#125;[0-9]&#123;16&#125;([0-9]|[xX])$/; ip验证12var exp = /^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$/; e-mail格式123456function emailTest(obj) &#123; var myreg = /^([a-zA-Z0-9\-\.]+)@([a-zA-Z0-9\-\.]+)\.([a-zA-Z]&#123;2,5&#125;)$/; if (!myreg.test(obj)) &#123; return false; &#125;&#125; val is empty123function isValEmpty(obj) &#123; return obj.length == 0 ? false : true&#125; inputinput输入纯数字的验证用普通的浏览器验证是正常的，但是微信中还能输入$#.之类的字符, RegExp(‘^[0-9]$’);123$('.integer-only').on('input', function() &#123; this.value = this.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1');&#125;); input只能输入数字与小数点并且是0.25的倍数:12345678910111213141516171819202122 $('#input').on('keyup', function() &#123; const value = $(this).val(); let replaceVal = value.replace(/[^0-9.]/g, '');//输入的值只能为数字与小数点 if (replaceVal.length === 1 &amp;&amp; replaceVal === '0') &#123;//第一位数字不能为０,为０时自动清空 replaceVal = ''; &#125; $(this).val(replaceVal); //这行对数据+字母无效: const regex = /\b[0-9]+\.(?:25|5|75)|(?&lt;!\.|\d)[1-9]\d*(?!\.)/; // if (!regex.test(replaceVal)) &#123; if (replaceVal % 0.25 !== 0) &#123;//输入的数字必须是０.２５的倍数 $('.error-msg').html(Drupal.t('Please enter a multiple 0f 0.25.')); &#125; &#125;)``` ## form-textarea``` bashfunction stripHTML(text) &#123; var regex = /(&lt;([^&gt;]+)&gt;)/ig; return text.replace(regex, "");&#125; form-checkbox123456789101112131415function checkboxVerification(checkbox) &#123; var $checkboxWrapper = checkbox.parents('.form-type-checkbox'); if(checkbox.is(':checked')) &#123; $checkboxWrapper.removeClass('empty-error'); $checkboxWrapper.find('.empty-error-message').remove(); &#125; else &#123; if(isRequired) &#123; isRequired = false; &#125; if(!$checkboxWrapper.hasClass('empty-error'))&#123; $checkboxWrapper.addClass('empty-error'); $checkboxWrapper.append("&lt;p class='empty-error-message'&gt;" + checkbox.attr('data-webform-required-error') + "&lt;/p&gt;"); &#125; &#125;&#125; form-email12345678910function emailVerification (email) &#123; if(emailTest(email.val()) == false) &#123; email.parent().addClass('empty-error'); if(isRequired) &#123; isRequired = false; &#125; &#125; else &#123; email.parent().removeClass('empty-error'); &#125;&#125; 验证123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263var isRequired;$('.form-textarea ').change(function () &#123; var textareaValue = $(this).val() $(this).val(stripHTML(textareaValue))&#125;);var requiredElement = "input[required]:not([type='radio']), select[required], textarea[required]";$form.find(requiredElement).each(function () &#123; var $this = $(this); if(!$this.parent().find('.empty-error-message').length &amp;&amp; $this.attr('type') !== 'checkbox')&#123; $this.parent().append("&lt;p class='empty-error-message'&gt;" + $this.attr('data-webform-required-error') + "&lt;/p&gt;"); &#125;&#125;);$form.find(requiredElement).bind('input propertychange', function () &#123;//propertychange 无意义 ，只为bind事件。 var $this = $(this); if (isValEmpty($this.val().trim())) &#123; if($this.attr('type') === 'email') &#123; emailVerification($this); &#125; else if($this.attr('type') === 'checkbox') &#123; checkboxVerification($this); &#125; else &#123; $this.parent().removeClass('empty-error'); &#125; &#125; else &#123; $this.parent().addClass('empty-error'); &#125;&#125;);submitBtn.on('click', function(e) &#123; isRequired = true; $form.find(requiredElement).each(function () &#123; var $this = $(this); if ($this.parent().is(":visible")) &#123; if (isValEmpty($this.val().trim()) == false) &#123; $this.parent().addClass('empty-error'); isRequired = false; &#125; else &#123; if($this.attr('type') === 'email') &#123; emailVerification($this); &#125; else if($this.attr('type') === 'checkbox') &#123; checkboxVerification($this); &#125; else &#123; $this.parent().removeClass('empty-error'); &#125; &#125; &#125; &#125;); if (isRequired == false) &#123; if ($('.empty-error-message:visible').length &gt; 0) &#123; var offsetTop = $(".empty-error-message:visible").eq(0).parent().offset().top - 60; $([document.documentElement, document.body]).animate(&#123; scrollTop: offsetTop &#125;, 250); &#125; return false &#125;&#125;);]]></content>
      <tags>
        <tag>JS</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-world]]></title>
    <url>%2F2019%2F03%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start1234npm install 或：npm install -g hexo //全局安装hexohexo server //启动服务器//打开浏览器, 在地址栏输入http://localhost:4000（如果打不开，提示：localhost 意外终止了连接，//电脑端口被占用了，hexo server -p 5000，换成5000端口，果断可以访问 http://localhost:5000） More info: Server 部署网站需要的配置12345添加在_config.yml最后面:deploy: type:git repo: https://xmh.com/my/my.io.git/ //远程文件branch: master //远程分支 安装部署使用到的git插件.1npm install hexo-deployer-git --save 新建一篇文章123hexo new "My New Post"hexo new post CSS-ie6hexo new page CSS3-Grid.md 编辑模板12路径:hexo\source\_posts模板:例CSS-ie6.md More info: Writing 发表草稿1hexo publish [layout] &lt;filename&gt; 生成静态文件1hexo g More info: Generating 部署网站1234hexo d//如果在部署出现错误信息如果下: ERROR Deployer not found: git//需要安装git插件: npm install hexo-deployer-git --save//进行自动部署网站, 注意部署前需要重新生成网站hexo g, 每一次修改后都需要重新生成网站 More info: Deployment 清除缓存文件1hexo clean]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery 常用的]]></title>
    <url>%2F2019%2F02%2F25%2FjQuery%2F</url>
    <content type="text"><![CDATA[jQuery包含某text文本的选择12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364$('h2:contains("Happy Chinese New Year")').hide();$('div:contains("xmh")').css('color', '#FF0000');# div元素中包含"xmh"文本的会变色$('dd:empty').html('没有内容');#:empty取不包含子元素或文本为空的元素$('div:has(span)')#包含span元素的div``` #### 前3组ul下的li下的a``` bash$('ul').find('li:lt(3)').children('a');``` #### 每个 &lt;ul&gt; 的第一个 &lt;li&gt; 元素``` bash$('ul li:first') $('ul').find('li').eq(0)``` #### :not 取非元素,不含量.wrap的div``` bash$('div:not(.wrap)')``` #### 奇偶数行``` bash$('tr:even').css('background', '#EEE'); # 偶数行颜色$('tr:odd').css('background', '#DADADA'); # 奇数行颜色``` #### 选第几个``` bash$('tr:eq(2)');#第2个tr$('ul li:last() a'); #最后一人li的a;$('ul li:nth-child(3) a') #第三个li的a``` #### 取大于2索引或小于2索引的元素``` bash $('ul li:gt(2)').css('color', '#FF0000'); $('ul li:lt(2)').css('color', '#0000FF');``` #### 取H1~H6标题元素``` bash$(':header').css('background', '#EFEFEF');``` #### 取可见或隐藏元素``` bash#:hidden选择器仅匹配display:none或&lt;input type="hidden" /&gt;的元素，#而不匹配visibility: hidden或opacity:0的元素。#这也意味着hidden只匹配那些“隐藏的”并且不占空间的元素，#像visibility:hidden或opactity:0的元素占据了空间，会被排除在外。$('div:hidden')$('div:visible')#取可见的元素``` #### id部份相同的选择方法``` bash$('input[id^="edit-field-"]') # 取ID为: edit-field-1 edit-field-2 ... 其它$('ol li:parent')#取包含子元素或文本的元素,不为空的li; $('a[title]')#取有title属性的a [attribute = value]和[attribute != value]#取attribute属性值等于value或不等于value的元素 $("input[name='nid']")#取有name='nid'的input $('input[type=text]'} #' input text选择器]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js 检测 touch 设备]]></title>
    <url>%2F2019%2F02%2F20%2Fjs-touch-device%2F</url>
    <content type="text"><![CDATA[检测 touch 设备123456789101112131415161718 var isPC, hClick='click'; if ('ontouchstart' in window) &#123; $('body').addClass('is-touch'); isPC = false; hClick = 'touchstart'; &#125; else &#123; $('body').addClass('no-touch'); isPC = true; &#125;$('.nav-tabs').once('.active').each(function () &#123; if (!isPC) &#123; $('.navbar-toggle').on(hClick, function() &#123; ...... &#125;) &#125;&#125;)]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分享 share]]></title>
    <url>%2F2018%2F12%2F20%2Fjs-share%2F</url>
    <content type="text"><![CDATA[share HTML 加copy12345678910&lt;div class="addtoany_list"&gt; &lt;div class="share-button"&gt;&lt;em&gt;&lt;/em&gt;&lt;span&gt;分享至&lt;/span&gt;&lt;/div&gt; &lt;div class="social-share" data-initialized="true"&gt; &lt;a class="social-share-icon icon-weibo" href="#"&gt;&amp;nbsp;&lt;/a&gt; &lt;a class="social-share-icon icon-wechat" href="#"&gt;&amp;nbsp;&lt;/a&gt; &lt;a class="social-share-icon icon-copy" href="javascript:"&gt;&amp;nbsp;&lt;/a&gt; &lt;div class="copy-success"&gt;复制成功&lt;/div&gt; &lt;div class="copy-error"&gt;请手动"复制"&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; share CSS1234567891011121314@import url("https://nspro.dev.ciandt.cn/sites/all/themes/custom/npro_master/css/share.min.css?pkoxsv");css文件夹同级放入fonts文件夹，icon字用的.social-share &#123; float: right; margin-bottom: 20px;&#125;.social-share .social-share-icon &#123; font-size: 0 !important; margin: 0 4px;&#125;.social-share .social-share-icon:before &#123; font-size: 20px;&#125; share JS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;script type="text/javascript" src="js/social-share.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/clipboard.min.js"&gt;&lt;/script&gt; function shareWechat() &#123; if ($('.addtoany_list').length)&#123; var $config = &#123; wechatQrcodeTitle : "微信扫一扫：分享", wechatQrcodeHelper : '&lt;p&gt;在微信中扫描二维码后&lt;/p&gt;&lt;p&gt;点击右上角的 ··· 分享&lt;/p&gt;' &#125;; &#125; &#125; function noClipboard () &#123; $('.copy-error').fadeIn('slow'); setTimeout(function()&#123; $('.copy-error').fadeOut('slow'); &#125;,2000); &#125; function shareCopyUrl()&#123; var clipBoardContent = window.location.href; if(ClipboardJS.isSupported()) &#123;//copy: clipboard Plugin var clipboard = new ClipboardJS('.icon-copy', &#123; text: function() &#123; return clipBoardContent; &#125; &#125;); clipboard.on('success', function(e) &#123; $('.copy-success').fadeIn('slow'); setTimeout(function()&#123; $('.copy-success').fadeOut('slow'); &#125;,2000); &#125;); clipboard.on('error', function(e) &#123; noClipboard(); &#125;); &#125; else &#123; $('.icon-copy').click(function(event) &#123; noClipboard(); &#125;); &#125; &#125; $(document).ready(function() &#123; shareCopyUrl(); &#125;); demo More info: demo,share.]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Multi-column Layout(CSS多列布局)]]></title>
    <url>%2F2018%2F11%2F15%2FCSS3-Columns%2F</url>
    <content type="text"><![CDATA[CSS Columns 是一种定义了多栏布局的模块，它能够表现出将内容在列之间怎么流动的以及间隙和分割线怎么使用。浏览器兼容性: IE10,IE10+More info: CSS Columns 12345678910111213141516171819202122. columns /* 3 30px */. column-count /* 最理想的分栏数目 */. column-width /* 每栏的最小宽度 */. column-rule /* 使用方法同border */. column-rule-width. column-rule-style. column-rule-color. column-gap /* 栏目之间的水平间隙 */. column-fill /* 定义栏目的高度是否统一 */. column-span /* all, none */column-count: 浏览器缩放保持设定数量的列column-width: 浏览器缩放不能容纳足够的列，列的数量会 -1，直至单列同时声明这两个属性时，column-count是最大列数，并且column-width是这些列的最小宽度。columns: 120px; /* column-width: 120px; column-count: auto */columns: auto 120px; /* column-width: 120px; column-count: auto */columns: 2; /* column-width: auto; column-count: 2 */columns: 2 auto; /* column-width: auto; column-count: 2 */columns: auto; /* column-width: auto; column-count: auto */columns: auto auto; /* column-width: auto; column-count: auto */ 三列布局(文字不间断,大标题横跨一整行):一个朋友和我讲的。他认识一个叫敖文，他弟弟叫敖轩。我的朋友好奇问，你弟弟为什么不叫敖武呢，这样文武双全多好呀！朋友回答，其实弟弟原来叫敖武，又一次晚上出去玩，已经到了吃饭的时间还不回家，所以妈妈就满村子的喊弟弟的名字，然后就给弟弟改名敖轩。我是大标题，横跨一整行一个朋友和我讲的。他认识一个叫敖文，他弟弟叫敖轩。我的朋友好奇问，你弟弟为什么不叫敖武呢，这样文武双全多好呀！朋友回答，其实弟弟原来叫敖武，又一次晚上出去玩，已经到了吃饭的时间还不回家，所以妈妈就满村子的喊弟弟的名字，然后就给弟弟改名敖轩。12345678910111213//column-rule设置分栏的样式 使用方式同border, 当宽度不够时会消失//column-gap设置分栏之间的水平间隙 默认为1em, font-size的值.css-columns3 &#123; columns: 3; column-rule: 1px solid #23a1c9; column-gap: 50px;&#125;.css-columns3 .columns-title &#123; column-span: all;//column-span有none和all两个值 text-align: center; padding: .5em;&#125; 古诗词,竖排文字:明月几时有？把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间？123456789.css-columns-vertical &#123; margin: 0 auto; columns: 1em; width: 90%; column-rule: dashed 1px #ccc; word-wrap: break-word; text-align: center; direction: rtl;&#125; 九宫格1234567891234567891011121314151617181920.css-columns-9 &#123; margin: 0 auto; columns: 3; width: 200px; text-align: center; border: solid 1px #23a1c9; padding: 10px 10px 0 10px;&#125;.css-columns-9 ul &#123; margin: 0; padding: 0; list-style: none;&#125;.css-columns-9 li &#123; margin-bottom: 10px; height: 50px; line-height: 50px; background: #23a1c9; color: #fff;&#125; 多列:contentcontentcontentcontentcontentcontentcontent123456.css-columns-multiple &#123; margin: 0 auto; columns: 90px; width: 300px; border: solid 1px #23a1c9;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[video,iframe,object,embed]]></title>
    <url>%2F2018%2F07%2F06%2FHTML5-video%2F</url>
    <content type="text"><![CDATA[object视频z-index无效object 能加上这个： &lt;param name="wmode" value="opaque"&gt; iframe,object,embed标签嵌入视频自适应 &lt;p class="video"&gt; &lt;iframe src="https://v.qq.com/iframe/player.html?vid=v06363imof8&amp;amp;tiny=0&amp;amp;auto=0" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt; &lt;/p&gt; #css: .video { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; } .video iframe, .video object, .video embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }]]></content>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js 点击左右切换]]></title>
    <url>%2F2018%2F07%2F05%2Fjs-slideTab%2F</url>
    <content type="text"><![CDATA[点击左右切换12345678910111213141516171819202122232425262728293031323334function slideTab() &#123; if (window.innerWidth &lt; 768)&#123; var j = 0, tabCons = $('.home-cap-covers .assistance-Insurance li'), tabMenus = $('.home-cap-covers .number li'), n = tabMenus.length; tabMenus.first().addClass('current'); tabCons.first().addClass('show'); tabMenus.each(function(i)&#123; $(this).click(function()&#123; $(this).addClass('current').siblings().removeClass(); tabCons.removeClass('show'); tabCons.eq(i).addClass('show'); j = $('.home-cap-covers .number li.current').index(); &#125;); &#125;); $('.home-cap-covers .next').click(function()&#123; $('.current').next().trigger('click'); &#125;); $('.home-cap-covers .prev').click(function()&#123; $('.current').prev().trigger('click'); &#125;); var t = setInterval(function()&#123; tabMenus.eq(j).trigger('click'); if(j &lt; n)&#123; j++; &#125;else&#123; j = 0; &#125; &#125;,2000); &#125; &#125;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6 学习笔记]]></title>
    <url>%2F2018%2F05%2F19%2FES6-study-notes%2F</url>
    <content type="text"><![CDATA[promisepromise: 承诺，许诺作用： 解决异步问题 (例如:用户登录-&gt;获取用户信息)传统方式，大部分用回调函数，事件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253let a = 10;let promise = new Promise(function(resolve,reject) &#123; //resolve 成功调用 //reject 失败调用 if(a == 0)&#123; resolve('成功'); &#125;else&#123; reject('失败'); &#125;&#125;);//1. promise.then(success,fail);promise.then(res=&gt;&#123; console.log(res);&#125;,err=&gt;&#123; console.log(err);&#125;);//fail的另一种方式promise.catch(err=&gt;&#123; console.log(err);&#125;)//2.将现有的东西,转成一个promise对象,resolve成功状态;// reject用法与resolve一样,一个成功状态,一个失败状态Promise.resolve('aa');等价于:new Promise(resolve=&gt;&#123; resolve('aa')&#125;)Promise.reject('aa');等价于:new Promise(reject=&gt;&#123; reject('aa')&#125;)//3.promise.all([p1,p2,p3]);把promise打包,扔到一个数组里面,打包完还是一个promise对象.// 必须确保,所有的promise对象,都是resolve状态,有一个reject就不行,必须都是成功状态.let p1 = Promise.resolve('aa');let p2 = Promise.reject('bb');//all对应: let p2 = Promise.resolve('bb');let p3 = Promise.resolve('cc');Promise.all([p1,p2,p3]).then(res=&gt;&#123; console.log(res); let[res1, res2, res3] = res; console.log(res1, res2, res3);&#125;)//4. promise.race([p1,p2,p3]):只要有一个成功状态,就返回Promise.race([p1,p2,p3]).then(res=&gt;&#123; console.log(res);&#125;) More info: promise 模块化12 Quick Start12 More info: Server]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 Grid 布局]]></title>
    <url>%2F2017%2F12%2F05%2FCSS3-Grid%2F</url>
    <content type="text"><![CDATA[1、HTML 结构我们需要的第一件事是一点 HTML 。 一个网格容器（将变成一个网格元素）和网格项（header, menu, content, footer）。浏览器兼容性查询 123456&lt;div class="container"&gt; &lt;div class="header"&gt;HEADER&lt;/div&gt; &lt;div class="menu"&gt;MENU&lt;/div&gt; &lt;div class="content"&gt;CONTENT&lt;/div&gt; &lt;div class="footer"&gt;FOOTER&lt;/div&gt;&lt;/div&gt;## 2、设置基本的 CSS那么我们需要在 container 元素设置 display: grid; ，将其设置为网格容器，并指定我们需要多少行和列。这是基本的CSS： 123456.container &#123; display: grid; grid-template-columns: repeat(12, 1fr); grid-template-rows: 50px 350px 50px; grid-gap: 5px;&#125; 以上代码的意思是：使用 grid-template-columns 属性创建一个 12 列的网格，每个列都是一个单位宽度（总宽度的 1/12 ）。（愚人码头注：其中， repeat(12, 1fr) 意思是 12 个重复的 1fr 值。 fr 是网格容器剩余空间的等分单位。）使用 grid-template-rows 属性创建 3 行，第一行高度是 50px ，第二行高度是 350px 和第三行高度是 50px。最后，使用 grid-gap 属性在网格中的网格项之间添加一个间隙。 3、添加 grid-template-areas这个属性被称为网格区域，也叫模板区域，能够让我们轻松地进行布局实验。要将它添加到网格中，我们只需给网格容器加一个 grid-template-areas 属性即可。 语法可能有点奇怪，因为它不像其他的 CSS 语法。例如： 12345678910.container &#123; display: grid; grid-gap: 5px; grid-template-columns: repeat(12, 1fr); grid-template-rows: 50px 350px 50px; grid-template-areas: "h h h h h h h h h h h h" "m m c c c c c c c c c c" "f f f f f f f f f f f f";&#125; grid-template-areas 属性背后的逻辑是你在代码中创建的网格可视化表示。正如你所看到的，它有 3 行 12 列，和我们在 grid-template-columns 和 grid-template-rows 中定义的正好呼应。每行代表一行，用网格术语来说是 网格轨道(Grid Track) ，每个字符（ h，m，c，f）代表一个网格单元格。愚人码头注：其实是 网格区域(Grid Area) 名称，你可以使用任意名称。四个字母中的每一个现在都形成一个矩形 grid-area 。你可能已经猜到，我选择了字符 h，m，c，f，是因为他们是 header, menu, content 和 footer 的首字母。 当然，我可以把它们叫做任何想要的名称，但是使用他们所描述的东西的第一个字符更加容易让人理解。 4、给网格项设定网格区域名称现在我们需要将这些字符与网格中的网格项建立对应的连接。 要做到这一点，我们将在网格项使用 grid-area 属性： 123456789101112.header &#123; grid-area: h;&#125;.menu &#123; grid-area: m;&#125;.content &#123; grid-area: c;&#125;.footer &#123; grid-area: f;&#125; 以下是完整的布局效果： HEADERMENUCONTENTFOOTER 5、尝试其他布局现在，我们开始讨论 Grid(网格) 布局 特性的精妙之处，因为我们可以很容易地对布局进行修改尝试。只需修改 grid-template-areas 属性的字符即可。举个例子，把 menu 移到右边： 123456.container2 &#123; grid-template-areas: "h h h h h h h h h h h h" "c c c c c c c c c c m m" "f f f f f f f f f f f f";&#125; 修改后的布局效果： HEADERMENUCONTENTFOOTER 6、我们可以使用点 . 来创建空白的网格单元格。123456.container3 &#123; grid-template-areas: ". h h h h h h h h h h ." "c c c c c c c c c c m m" ". f f f f f f f f f f .";&#125; 修改的布局效果看起来是这样的： HEADERMENUCONTENTFOOTER 7、添加响应式布局12345678@media screen and (max-width: 640px) &#123; .container &#123; grid-template-areas: "m m m m m m h h h h h h" "c c c c c c c c c c c c" "f f f f f f f f f f f f"; &#125;&#125; 请记住，所有这些更改都是使用纯 CSS 完成的，不需要修改 HTML 。 无论 div 标签如何在 HTML 中是怎么样的顺序结构，我们都可以随意转换。（愚人码头注：这点与 flexbox 类似，网格项（grid items）的源顺序无关紧要。你的 CSS 可以以任何顺序放置它们，这使得使用 媒体查询（media queries）重新排列网格变得非常容易。）这被称为结构和表现分离， Grid(网格) 布局真正做到了这点，对于 CSS 来说是一个巨大的进步。它允许 HTML 成为它想要的样子: 作为内容的标记。HTML 结构不再受限于样式表现，比如不要为了实现某种布局而多次嵌套，现在这些都可以让 CSS 来完成。如果你错过了 Grid(网格) 布局的最简入门，请阅读：5分钟学会 CSS Grid 布局 。 了解更多请阅读：CSS Grid 布局完全指南(图解 Grid 详细教程)，让你体会 Grid 布局真正的强大和灵活。]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5整理]]></title>
    <url>%2F2017%2F05%2F23%2FHTML5%2F</url>
    <content type="text"><![CDATA[微信 H5 的开发过程中遇到的一些坑1. 页面滚动不顺畅,在ios版的微信里会出现问题，解决办法给要滚动区域的元素加上这个属性：1-webkit-overflow-scrolling: touch; 2. ios版会把页面中的一串数字识别成电话然后触摸会调用系统不打电话，解决办法加上meta1&lt; meta content="telephone=no,email=no" name="format-detection" /&gt; 3. 在一些文字过多的地方Android版微信会把文字变大而ios则不会，这样会导致排版错乱页面变得很丑…12解决的办法是给包裹文字的元素加上:display: inline-block; 4. 点击元素产生背景加上这个:1-webkit-tap-highlight-color: rgba(0,0,0,0); 5. click的300ms延迟1要么禁止页面的缩放，要么如果使用了zepto，则用tap代替click，要么使用fastclick。]]></content>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js A外链popup external]]></title>
    <url>%2F2017%2F02%2F25%2Fjs-external%2F</url>
    <content type="text"><![CDATA[Check for External URLfunction checkForExternalUrl() { $("a").click(function (event) { event.stopPropagation(); var base_url = window.location.origin; if (!window.location.origin) { base_url = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : ''); } var external_url = $(this).attr('href'); external_url = $.trim(external_url); var offsite = "&lt;div class='overlay'&gt;&lt;/div&gt;&lt;div id='offsite' class='popup'&gt;"+ "&lt;p&gt;"+Drupal.t('您正要离开')+base_url+Drupal.t('站点,并进入了另一个站点')+"&lt;/p&gt;"+ "&lt;div class='buttons'&gt;"+"&lt;a class='back btn'&gt;"+Drupal.t('取消')+"&lt;/a&gt;"+"&lt;a class='proceed btn' target='_blank'&gt;"+Drupal.t('确定')+"&lt;/a&gt;"+ "&lt;/div&gt;"+"&lt;/div&gt;"; if (external_url !== undefined &amp;&amp; external_url != '#' &amp;&amp; external_url != '') { if (external_url.indexOf('http') &gt; -1 &amp;&amp; external_url.indexOf(base_url) &lt; 0) { if(!$('#offsite').length){ $('body').append(offsite); } $('.back,.overlay').click(function () { $(".overlay,#offsite").remove(); }); $('.proceed').click(function () {//alert(external_url); $(".overlay,#offsite").remove(); }); $('.proceed').attr('href', external_url); return false; } } }); }]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 Flexible Box (Flex 布局)]]></title>
    <url>%2F2016%2F11%2F14%2FCSS3-flexible%2F</url>
    <content type="text"><![CDATA[display: flex常用场景:两端对齐:1234567891011// justify-content参数查看： https://www.runoob.com/try/playit.php?f=playcss_justify-content&amp;preval=center.container&#123; display: flex; justify-content: space-between;/* 两端对齐 */ align-items: center;/* 垂直居中 */ justify-content: center;/* 居中对齐 */ &#125; .container div &#123; flex:1;//宽度平均分 &#125; flex布局代替float:left，float:right两div居左居右1234567891011121314 //flex: 1在ie11 下 flex: 1 解析为1 1 0, 而不是其他浏览器的1 1 auto, 所以这时还要对flex: 1进行修改，使用flex-grow: 1.teaser-content &#123; display: flex; flex: 1; flex-grow: 1; /*ie: flex:1 改成: flex-grow: 1 */ &#125; .teaser-content .left-image &#123; flex: 0 1 25%; margin-right: 30px; &#125; .teaser-content .teaser-text &#123; flex: 1; &#125; scss @mixin:12345678910//flex布局复用定义 @mixin flex($hov:space-between,$col:center)&#123;//space-between,center是默认值 display:flex; justify-content:$hov; align-items:$col; &#125; //flex布局使用 .container&#123; @include flex(); &#125; 一、Flex布局是什么？Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。Flex是一组规则，用于在父容器中自动扩展多列和多行。1111 1111 1111 1111 1111 111123451222 222345 123456789//任何一个容器都可以指定为Flex布局。.flexible-flex &#123; display: flex;//父级设置该属性,任何一个容器都可以指定为Flex布局; display: -webkit-flex; /* Safari */&#125;.flexible-inline-flex &#123; display: inline-flex;//父级设置该属性,行内元素&#125; 二、浏览器兼容性 三、基本概念采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 四、容器的属性1234567891011flex-directionflex-wrapflex-flowjustify-contentalign-itemsalign-content 1. flex-direction方向设置主轴对齐方式 默认 row x轴从左到右, flex-direction: row, row-reverse, column, column-reverserow-1row-2row-3row-reverse-1row-reverse-2row-reverse-3column-1column-2column-3column-reverse-1column-reverse-2column-reverse-3 12345678910111213141516171819.box &#123; flex-direction: row | row-reverse | column | column-reverse;&#125;ul &#123; display: flex;&#125;ul.row &#123; flex-direction: row;//默认值：主轴为水平方向，起点在左端。&#125;ul.row-reverse &#123; flex-direction: row-reverse;//主轴为水平方向，起点在右端。&#125;ul.column &#123; flex-direction: column;//主轴为垂直方向，起点在上沿&#125;ul.column-reverse &#123; flex-direction: column-reverse;主轴为垂直方向，起点在下沿。&#125; 2. flex-wrap子元素换行的方式,默认nowrap,x轴从左到右,x轴的方向决定了新行堆叠的方向1. flex-wrap: nowrapabcd2. flex-wrap: wrapabcd3. flex-wrap: wrap-reverseabcd 1234567891011121314151617181920.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125;.flex-wrap ul &#123; display: flex;&#125;.flex-wrap li &#123; width: 100px; height: 50px;&#125;.flex-wrap .nowrap &#123; flex-wrap: nowrap;//1. 默认不换行,可以不写;&#125;.flex-wrap .wrap &#123; flex-wrap: wrap;//2. 换行，第一行在上方&#125;.flex-wrap .wrap-reverse &#123; flex-wrap: wrap-reverse;//3. 换行，第一行在下方。&#125; 3. flex-flow行排,竖排 &amp;&amp; 次序: order示例flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。1. 从左到右行排: flex-flow: row nowrapabc2. 竖排: flex-flow: column, order改变排序abc3. 右到左: flex-flow:column wrap-reverse;abc 12345678910111213141516171819202122232425.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125;ul&#123; display: flex; //flex-flow: row nowrap;1. 默认就是从左到右,可以不写;&#125;ul.column&#123; flex-flow: column;//2. 竖排&#125;ul.column li:nth-child(2) &#123; order: 1;&#125;ul.column li:nth-child(3) &#123; order: -1;&#125;ul.wrap-reverse&#123; flex-flow: column wrap-reverse;//3. 从右到左 height: 50px;&#125; 4. justify-content示例：justify-content属性定义了项目在主轴上的对齐方式。1. flex-startabc2. flex-endabc3. centerabc4. space-betweenabc5. space-aroundabc 1234567891011121314151617181920212223.box &#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125;ul&#123; display:flex;&#125;.flex-start&#123; justify-content: flex-start;//默认值：左对齐&#125;.flex-end&#123; justify-content: flex-end;//右对齐&#125;.center &#123; justify-content: center;//居中&#125;.space-between &#123; justify-content:space-between; //两端对齐，项目之间的间隔都相等。&#125;.space-around &#123; justify-content:space-around;//每个项目两侧的间隔相等。 //所以，项目之间的间隔比项目与边框的间隔大一倍&#125; 5. align-items属性align-items属性定义项目在交叉轴上如何对齐。 12345678910.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125;//它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。flex-start：交叉轴的起点对齐。flex-end：交叉轴的终点对齐。center：交叉轴的中点对齐。baseline: 项目的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 6. align-content属性align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 1234567891011.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125;//该属性可能取6个值。flex-start：与交叉轴的起点对齐。flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。 五、项目的属性123456orderflex-growflex-shrinkflex-basisflexalign-self 1. order属性order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。abc1234567891011.item &#123; order: &lt;integer&gt;;&#125;ul.column li:nth-child(2) &#123; order: 1;&#125;ul.column li:nth-child(3) &#123; order: -1;&#125; 2. flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 123.item &#123; flex-grow: &lt;number&gt;; /* default 0 */&#125; 3. flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 123.item &#123; flex-shrink: &lt;number&gt;; /* default 1 */&#125; 4. flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 123.item &#123; flex-basis: &lt;length&gt; | auto; /* default auto */&#125; 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 5. flex属性flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 123.item &#123; flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]&#125; 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 6. align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 123.item &#123; align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。More info: www.runoob.com]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js常用函数(scrollTop,stopPropagation,preventDefault,拷贝对象)]]></title>
    <url>%2F2016%2F08%2F05%2Fjs-2016%2F</url>
    <content type="text"><![CDATA[scrollTop$(window).scroll(function() { var a = $(window).scrollTop(); if(a &gt; 100) { $('.go-top').fadeIn(); }else { $('.go-top').fadeOut(); } }); $(".go-top").click(function(){ $("html,body").animate({scrollTop:"0px"},'600'); }); 阻止冒泡function stopBubble(e){ e = e || window.event; if(e.stopPropagation){ e.stopPropagation(); //W3C阻止冒泡方法 }else { e.cancelBubble = true; //IE阻止冒泡方法 } } 取消默认事件#假定有链接&lt;a href="www.baidu.com" id="testA" &gt;baidu&lt;/a&gt; var a = document.getElementById("testA"); a.onclick =function(e){ if(e.preventDefault){ e.preventDefault(); }else{ window.event.returnValue == false; } } 深度拷贝对象function cloneObj(obj) { var o = obj.constructor == Object ? new obj.constructor() : new obj.constructor(obj.valueOf()); for(var key in obj){ if(o[key] != obj[key] ){ if(typeof(obj[key]) == 'object' ){ o[key] = mods.cloneObj(obj[key]); }else{ o[key] = obj[key]; } } } return o; } clink事件 点击一次变多次$(window).resize(function() {})与window.onorientationchange = function() {}中js clink事件 点击一次变多次?解决方法,每次绑定前先取消上次的绑定： $('#sub').unbind('click').click(function () { });]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js 字符串String(替换,获取url中的参数,操作cookie)]]></title>
    <url>%2F2016%2F07%2F05%2Fjs-str%2F</url>
    <content type="text"><![CDATA[全部替换replaceAllvar replaceAll = function(bigStr, str1, str2) { //把bigStr中的所有str1替换为str2 var reg = new RegExp(str1, 'gm'); return bigStr.replace(reg, str2); } 获取浏览器url中的参数值function getURLParam (name) { return decodeURIComponent((new RegExp('[?|&amp;]' + name + '=' + '([^&amp;;]+?)(&amp;|#|;|$)', "ig").exec(location.search) || [, ""])[1].replace(/\+/g, '%20')) || null; }; # url: baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=阻止冒泡和默认事件 getURLParam('wd'); #// 阻止冒泡和默认事件 操作cookiefunction setCookie(cname, cvalue, exdays) { var d = new Date(); d.setTime(d.getTime() + (exdays*24*60*60*1000)); var expires = 'expires='+d.toUTCString(); document.cookie = cname + '=' + cvalue + '; ' + expires; }; function getCookie(cname) { var name = cname + '='; var ca = document.cookie.split(';'); for(var i=0; i&lt; ca.length; i++) { var c = ca[i]; while (c.charAt(0) == ' ') c = c.substring(1); if (c.indexOf(name) != -1) return c.substring(name.length, c.length); } return ''; }; //使用: var sValue = $(this).val(); var cookieVal = setCookie("contact-us-select-Val",sValue, 7);//设置cookie var cookieVal = getCookie("contact-us-select-Val");//获取cookie 【jquery】jquery.cookie.js //使用: $.cookie('wcag-cookie-font-size', id, { expires: 7, path: '/' });//设置cookie var CookieFontSize = $.cookie('wcag-cookie-font-size');//获取cookie]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ajax jsonp 常用方式]]></title>
    <url>%2F2016%2F07%2F05%2Fjs-ajax%2F</url>
    <content type="text"><![CDATA[jquery ajax函数var Ajax = function(url, type success, error) { $.ajax({ url: url, type: type, dataType: 'json', timeout: 10000, success: function(d) { var data = d.data; success &amp;&amp; success(data); }, error: function(e) { error &amp;&amp; error(e); } }); }; // 使用方法： Ajax('/data.json', 'get', function(data) { console.log(data); }); jsonp方式function jsonp(config) { var options = config || {}; // 需要配置url, success, time, fail四个属性 var callbackName = ('jsonp_' + Math.random()).replace(".", ""); var oHead = document.getElementsByTagName('head')[0]; var oScript = document.createElement('script'); oHead.appendChild(oScript); window[callbackName] = function(json) { //创建jsonp回调函数 oHead.removeChild(oScript); clearTimeout(oScript.timer); window[callbackName] = null; options.success &amp;&amp; options.success(json); //先删除script标签，实际上执行的是success函数 }; oScript.src = options.url + '?' + callbackName; //发送请求 if (options.time) { //设置超时处理 oScript.timer = setTimeout(function () { window[callbackName] = null; oHead.removeChild(oScript); options.fail &amp;&amp; options.fail({ message: "超时" }); }, options.time); } }; // 使用方法： jsonp({ url: '/b.com/b.json', success: function(d){ //数据处理 }, time: 5000, fail: function(){ //错误处理 } });]]></content>
      <tags>
        <tag>JS</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js Array数组(去重,截取和清空,排序sort函数,对象和字符串的转换...)]]></title>
    <url>%2F2016%2F07%2F04%2Fjs-arr%2F</url>
    <content type="text"><![CDATA[数组去重12345678910var unique = function(arr) &#123; var result = [], json = &#123;&#125;; for (var i = 0, len = arr.length; i &lt; len; i++)&#123; if (!json[arr[i]]) &#123; json[arr[i]] = 1; result.push(arr[i]); //返回没被删除的元素 &#125; &#125; return result;&#125;; 判断数组元素是否重复var isRepeat = function(arr) { //arr是否有重复元素 var hash = {}; for (var i in arr) { if (hash[arr[i]]) return true; hash[arr[i]] = true; } return false; }; 知识技巧总结数据类型underfined、null、0、false、NaN、空字符串。他们的逻辑非结果均为true。 闭包格式好处：避免命名冲突（全局变量污染）。 (function(a, b) { console.log(a+b); //30 })(10, 20); 截取和清空数组var arr = [12, 222, 44, 88]; arr.length = 2; //截取，arr = [12, 222]; arr.length = 0; //清空，arr will be equal to []. 获取数组的最大最小值var numbers = [5, 45822, 120, -215]; var maxInNumbers = Math.max.apply(Math, numbers); //45822 var minInNumbers = Math.min.apply(Math, numbers); //-215 数组排序sort函数var arr = [1, 5, 6, 3]; //数字数组 arr.sort(function(a, b) { return a - b; //从小到大排 return b - a; //从大到小排 return Math.random() - 0.5; //数组洗牌 }); var arr = [{ //对象数组 num: 1, text: 'num1' }, { num: 5, text: 'num2' }, { num: 6, text: 'num3' }, { num: 3, text: 'num4' }]; arr.sort(function(a, b) { return a.num - b.num; //从小到大排 return b.num - a.num; //从大到小排 }); 对象和字符串的转换var obj = {a: 'aaa', b: 'bbb'}; var objStr = JSON.stringify(obj); // "{"a":"aaa","b":"bbb"}" var newObj = JSON.parse(objStr); // {a: "aaa", b: "bbb"} 集合集合取交集Array.intersect = function () { var result = new Array(); var obj = {}; for (var i = 0; i &lt; arguments.length; i++) { for (var j = 0; j &lt; arguments[i].length; j++) { var str = arguments[i][j]; if (!obj[str]) { obj[str] = 1; } else { obj[str]++; if (obj[str] == arguments.length) { result.push(str); } }//end else }//end for j }//end for i return result; } 集合去掉重复 Array.prototype.uniquelize = function () { var tmp = {}, ret = []; for (var i = 0, j = this.length; i &lt; j; i++) { if (!tmp[this[i]]) { tmp[this[i]] = 1; ret.push(this[i]); } } return ret; } 并集Array.union = function () { var arr = new Array(); var obj = {}; for (var i = 0; i &lt; arguments.length; i++) { for (var j = 0; j &lt; arguments[i].length; j++) { var str=arguments[i][j]; if (!obj[str]) { obj[str] = 1; arr.push(str); } }//end for j }//end for i return arr; } 2个集合的差集 在arr不存在Array.prototype.minus = function (arr) { var result = new Array(); var obj = {}; for (var i = 0; i &lt; arr.length; i++) { obj[arr[i]] = 1; } for (var j = 0; j &lt; this.length; j++) { if (!obj[this[j]]) { obj[this[j]] = 1; result.push(this[j]); } } return result; }; console.log(Array.intersect(["1", "2", "3"], ["2", "3", "4", "5", "6"]));//[2,3] console.log([1, 2, 3, 2, 3, 4, 5, 6].uniquelize());//[1,2,3,4,5,6] console.log(Array.union(["1", "2", "3"], ["2", "3", "4", "5", "6"], ["5", "6", "7", "8", "9"])) console.log(["2", "3", "4", "5", "6"].minus(["1", "2", "3"]));]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js Number (生成随机数, π值, 绝对值,toFixed)]]></title>
    <url>%2F2016%2F06%2F05%2Fjs-number%2F</url>
    <content type="text"><![CDATA[生成随机数function randombetween(min, max){ return min + (Math.random() * (max-min +1)); } 浮点数计算问题为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示。可以通过使用toFixed()来解决这个问题。 0.1 + 0.2 == 0.3 #//false Math 常用属性: PI π值一部分Math.PI //3.141592653589793 abs(number) 获取参数的绝对值常用方法:注:接收参数为number类型,如使用非number类型则方法会尝试使用Number(number)方法去转换为Number类型,而不是使用 parseFloat(number) Math.abs(10)//10 Math.abs(-10)//10 Math.abs("10")//10 Math.abs("10abc")//NaN window.parseFloat("10abc")//10 Number("10abc")//NaN ceil(number)向下取整Math.ceil(10.0001)//11 Math.ceil("10.99abc")//NaN floor(number) 向下取整Math.floor(10.2) //10 Math.floor(10.99)//10 Math.floor("10.99")//10 字符串参数 Math.floor("10.99abc")//NaN max(numberX,numberY,…) 获取输入参数中最大的一个Math.max(10,200,400)//400 Math.max("1077",200,400)//1077 注意返回值是Number类型,而不是String类型 Math.max([1,2,3],[4,5,6]) //NaN min(numberX,numberY,…)获取输入参数中最小的一个Math.min(10,200,400)//10 Math.min(1077,"200",400)//200 注意返回值是Number类型,而不是String类型 Math.min([1,2,3],[4,5,6]) //NaN pow (numberX,numberY) 获取参数x的y次方,参数二没有默认值Math.pow(8,2)//64 Math.pow("8",2)//64 Math.pow("8","2")//64 Math.pow("8")//NaN 参数二没有默认值 random() 返回0-1的随机数Math.random()//0.636911032255739 round(number) 四舍五入保留整数,保留几位小数是Number的方法.toFixedMath.round(10.499)//10 Math.round(10.500)//11 123.43323.toFixed() //"123",当参数为空时默认保留到整数,注意返回的是String而不是Number 123.43323.toFixed(2)//"123.43" 123.toFixed(2) //Uncaught SyntaxError: Unexpected token ILLEGAL 这里报错了是因为系统把123后面的点当成了是小数点而非调用方法点 (123).toFixed(2) //"123.00" ,当小数点后不足两位时,该方法会自动不足,这也是为什么返回值为字符串而非数值的原因]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用CSS3整理]]></title>
    <url>%2F2016%2F05%2F21%2FCSS3-finishing%2F</url>
    <content type="text"><![CDATA[显示几行,超出显示…（x,n要改为实际数字，ie,ff不支持省略号）12345678display: block;display: -webkit-box;overflow: hidden;-webkit-line-clamp: 2;-webkit-box-orient: vertical;text-overflow: ellipsis;line-height: X;max-height: X*N; 图片遮罩1. 方形的图变成圆形显示123img &#123; clip-path: circle(100px at center);&#125; 2. 文字和背景图在某个形状内显示1234567.bg-mask｛ width: 200px; height: 200px; background: url(img/orig.jpg);//背景图片 color: red; -webkit-mask-box-image: url(img/mask.png);//米老鼠图形内填充，图形外是全透明；｝ body里所有的 a 不能点击的链接123body &#123; pointer-events: none;// ie9,ie10不支持.&#125; iPhone 设备 横屏字不要放大123456@media screen and (max-device-width: 1023px)&#123; body&#123; -webkit-text-size-adjust:none; -ms-text-size-adjust:none &#125;&#125; iPhone 设备 滚动条滚得更灵活123html, body &#123; -webkit-overflow-scrolling: touch;&#125; 宽高包含border\padding值123-webkit-box-sizing: border-box;-moz-box-sizing: border-box;box-sizing: border-box; 打勾动画 1234567891011121314151617181920.successIcon&#123; display: inline-block; width:60px; height: 60px; background: url("/img/confirmation-tick.png") no-repeat left center; background-size: auto 100%; animation: fill 0.56s steps(13, start) forwards; -webkit-animation: fill 0.56s steps(13, start) forwards; -ms-animation: fill 0.56s steps(13, start) forwards&#125;//780 = (60/170)*2210, 170是每帧图的宽，170*13(13帧)= 2210;@keyframes fill &#123; to &#123; background-position: -780px &#125;&#125;@-webkit-keyframes fill &#123; to &#123; background-position: -780px &#125;&#125;@-ms-keyframes fill &#123; to &#123; background-position: -780px &#125;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端开发 干货知识]]></title>
    <url>%2F2016%2F03%2F06%2FHTML5-Mobile%2F</url>
    <content type="text"><![CDATA[ipad ios css active不兼容只需给body绑定一个匿名空函数touchstart事件就可以正常使用active事件了，美团H5就这么做的123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#方法一:var a = document.getElementsByTagName('a');for(var i = 0; i &lt; a.length; i++)&#123; a[i].addEventListener('touchstart',function()&#123; &#125;,false);&#125;#方法二:&lt;body ontouchstart="" onmouseover=""&gt;&lt;/body&gt;``` ### border-image在手机端如果1px线条仍然显示过粗，可以使用css新属性border-image边框图像来解决``` bash 例：border-image: url(../img/line-img1.png) 2 0 round;``` [border-image](http://www.w3cplus.com/content/css3-border-image)在部分安卓机上使用border-image后，发现内容区域设置 :active 后不起作用。原因：border-image 后面默认加了fill关键字解决办法：使用的边框图片，图片中间区域背景一定要是透明的。### input事件1. 部分安卓机对键盘事件不兼容，如果是对输入框内容监听变化可用input事件;2. input输入框输入内容后，点击自定义清空内容的按钮，键盘收起的问题2. 解决办法：按钮用input标签，改变样式为按钮样子，点击删除后，设置原输入框focus();### 防止按钮点击时 背景闪烁``` bash html&#123; -webkit-tap-highlight-color: transparent; &#125;``` ### 兼容iOS伪类 :active 需要给 document 绑定 touchstart 或 touchend 事件``` bashdocument.addEventListener('touchstart',function()&#123;&#125;,false);``` ### 禁止用户选中文字``` bash -webkit-user-select: none``` ### 设置input的placeholder内容样式的方法``` bash input::-webkit-input-placeholder&#123; color:#999; font-size: 14px; &#125; 解决方案,腾讯移动端解决方案移动设备尺寸大全 各种参考手册cssjavascriptjqueryzepto]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>JS</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS-数组/字符串-互转]]></title>
    <url>%2F2016%2F02%2F25%2Fjs-array-string%2F</url>
    <content type="text"><![CDATA[数组转字符串，去引号，逗号后加空格。123456var rId = [a,b,c] var reg = new RegExp('"', "g");rId.toString().replace(reg, "");// add spacerId.replace(/,/g, ', '); 例 ：1234567891011121314151617var abc = []; abc.push('111','222','333','444');//(4) ["111", "222", "333", "444"]var aa = JSON.stringify(abc);//转字符："["111","222","333","444"]"JSON.parse(aa);//转数组：(4) ["111", "222", "333", "444"]aa.split(',')[0];//字符串分割："["111""var reg = new RegExp('"', "g");var bb = aa.toString().replace(reg, " ");//去掉引号：[111, 222, 333, 444]var reg2 = new RegExp(',', "g");bb.replace(reg2, "");//去掉逗号：[111 222 333 444]abc.splice(3);//去掉第3个"444"，结果：(3) ["111", "222", "333"] 字符串与数组转换JSON.stringify(obj)将JSON转为字符串。JSON.parse(string)将字符串转为JSON格式； 上面的转换可以这么写： var a={"name":"tom","sex":"男","age":"24"}; var b={"name":"Mike","sex":"女","age":"29"}; var aToStr=JSON.stringify(a); var bToObj=JSON.parse(b); alert(typeof(aToStr)); //string alert(typeof(bToObj)); //object 1、数组转字符串需要将数组元素用某个字符连接成字符串，示例代码如下 var a, b; a = [0,1,2,3,4]; b = a.join("-"); //"0-1-2-3-4" 2、字符串转数组实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下： var str = "aaa,bbb,ccc"; strArr = str.split(",");// 在每个逗号(,)处进行分解 ["aaa", "bbb", "ccc"] var hello = "helloworld"; helloArr = hello.split(''); //["h", "e", "l", "l", "o", "w", "o", "r", "l", "d"]]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3选择器nth-child(n)实现隔几行选择元素]]></title>
    <url>%2F2015%2F11%2F27%2FCSS3-nth-child-n%2F</url>
    <content type="text"><![CDATA[nth-child(n)，n 可以是数字、关键词或公式。选择器匹配属于其父元素的第N个子元素，不论元素的类型。 一行显示4个，第4个的倍数+1另起一行:123li:nth-child(4n+1)&#123; clear: both ;&#125; 序号写法把第3个LI的背景设为橙色:123li:nth-child(3)&#123; background:orange;&#125; 倍数写法把第3、第6、第9…、所有3的倍数的LI的背景设为橙色:123li:nth-child(3n)&#123; background:orange;&#125; 倍数分组匹配：(1). 匹配第1、第4、第7、…、每3个为一组的第1个LI123li:nth-child(3n+1)&#123; background:orange;&#125; (2). 匹配第5、第8、第11、…、从第5个开始每3个为一组的第1个LI123li:nth-child(3n+5)&#123; background:orange;&#125; (3). 匹配第5-1=4、第10-1=9、…、第5的倍数减1个LI123li:nth-child(5n-1)&#123; background:orange;&#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS设置获取cookie]]></title>
    <url>%2F2015%2F11%2F03%2Fjs-get-cookie%2F</url>
    <content type="text"><![CDATA[js获取url指定参数值1234567891011121314function getCookie(cname) &#123; var name = cname + "="; var ca = document.cookie.split(';'); for(var i = 0; i &lt; ca.length; i++) &#123; var c = ca[i]; while (c.charAt(0) == ' ') &#123; c = c.substring(1); &#125; if (c.indexOf(name) == 0) &#123; return c.substring(name.length, c.length); &#125; &#125; return "";&#125; 123456789//使用 $("a").click(function () &#123; var external_url = $(this).attr('href'); external_url = $.trim(external_url); var cookieSelect = "external-url=" + external_url; document.cookie = cookieSelect;//设置cookie &#125;);var external_url = getCookie("external-url");//获取cookie]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 常用命令]]></title>
    <url>%2F2015%2F10%2F19%2Fgit%2F</url>
    <content type="text"><![CDATA[创建版本库12git clone &lt;url&gt; // 克隆远程版本库git init //初始化本地版本库 修改和提交12345678910git status //查看状态git diff //查看变更内容git add . //跟踪所有改动过的文件git add &lt;file&gt; //跟踪指定的文件git add --all //提交全部git mv &lt;old&gt; &lt;new&gt; //文件改名git rm &lt;file&gt; //删除文件git rm --cached &lt;file&gt; //停止跟踪文件但不删除git commit -m "commit message" //提交文件git commit --amend //修改最后一次提交 常用提交流程12345git status git pull -r git add ABC-themes/abc/ //添加abc文件夹git commit -m "[ABC-15] " //提交消息git push 查看提交历史123git log //查看提交历史git log -p &lt;file&gt; //查看指定文件的提交历史git blame &lt;file&gt; //以列表方式查看指定文件的提交历史 撤消1234567891011git reset --hard HEAD //撤消工作目录中所有示提交文件的修改内容，撤消后就找不回来了,是将工作区、暂存取和HEAD保持一致git reset --hard //放弃本地修改,是将咱暂存区和HEAD的提交保持一致git checkout HEAD &lt;file&gt; //撤消指定未提交文件的修改内容git checkout -- . //删除本地所有改动 git reflog //可以查看所有分支的所有操作记录//用git log则是看不出来被删除的commitid; git reflog包括被删除的commitid，我们就可以买后悔药，恢复到被删除的那个版本git revert &lt;commit&gt; //撤销 某次操作 没有PUSH之前, 取消前次commit,回到上一次提交（adbe592）12git refloggit reset adbe592 撤消指定的提交, 远程不留历史记录12345git refloggit reset --hard 37d463236f7a8//回退到37d463236f7a8版本, 这一步之前一定要保存好文件，之后就什么都没有了git push origin feature/ABC-99 -f //强制, push &lt;&gt; -f,不强推会冲突，推不上，必须强推 git revert 和 git reset的区别1234567git revert 撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交 * git revert HEAD 撤销前一次 commit * git revert HEAD^ 撤销前前一次 commit * git revert commit （比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容git reset是直接删除指定的commit,远程不留历史记录. 分支与标签123456789git branch //显示所有本地分支git branch -a //查看本地和远程所有分支git branch -r | grep r126 //查看含有r126的分支git checkout &lt;branch/tag&gt; //切换到指定分支或标签git branch &lt;new-branch&gt; //创建新分支git branch -d &lt;branch&gt; //删除本地分支git tag //列出所有本地标签git tag &lt;tagname&gt; //基于最新提交创建标签git tag -d &lt;tagname&gt; //删除标签 常用切换到指定分支流程123git fetch --allgit branch -r | grep ABC //查看含有ABC的分支git checkout --track origin/feature/ABC-3543 切换到分支ABC-2:12345git stashgit fetchgit branch -D ABC-2git checkout ABC-2git stash pop 指针分离develop分支1git checkout develop //git checkout origin/develop是远程，要切回本地：git checkout develop 合并与衍合12git merge &lt;branch&gt; //合并指定分支到当前分支（需先切换到当前分支操作）git rebase &lt;branch&gt; //衍合指定分支到当前分支 在support分支merge ABC-2739分支123git checkout origin/supportgit merge origin/ABC-2739git push git rebase 后再git merge1234git pull -r //rebase之前需要经master分支拉到最新git checkout origin/dev //切换分支到需要rebase的分支，这里是dev分支git rebase master //有冲突就解决冲突，解决后直接git add . 再git rebase --continue即可切换到master分支，执行git merge dev 解决冲突, 撤下不要合并的代码:1234567git stashgit loggit rebase -i HEAD~7 //合并7条 commit提交为一个提交,//git checkout themes/abc/css/git rebase --continue //合并冲突，本地如果产生冲突，手动解决冲突之后，结合"git add 文件"命令一起用与修复冲突git rebase --abort //放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；git stash pop 没有PUSH之前,取消add的文件123456789101112131415161.git rebase --abort //放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；git reset --soft d688f04 //回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可；git stashgit statusgit pull --rebase2.git reset --hard HEAD~ // 是将工作区、暂存取和HEAD保持一致git reset --soft HEAD^//取消上次commitgit statusgit rebase --continue //合并冲突，本地如果产生冲突，手动解决冲突之后，结合"git add 文件"命令一起用与修复冲突git branch --all //显示所有远距离和局部树枝git rebase --abort //放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；git pull --rebase 远程操作123456789git remote -v //查看远程版本信息git remote show &lt;remote&gt; //查看指定远程版本库信息git remote add &lt;remote&gt; &lt;url //添加远程版本库git fetch &lt;remote&gt; //从远程库获取代码git fetch -p //获取被删减后的远程分支git pull &lt;remote&gt; &lt;branch&gt; //下载代码及快速合并git pull -rgit push &lt;remote&gt; &lt;branch&gt; //上传代码及快速合并git push &lt;remote&gt; : &lt;branch/tag-name&gt; //删除远程分支或标签git push --tags //上传所有标签 git版本更新（对于Ubuntu，此PPA提供最新的稳定上游Git版本）1231. sudo add-apt-repository ppa:git-core/ppa2. sudo apt update 3. apt install git 本地存储12git stash //本地存储git stash pop //恢复工作区的内容,删除栈中对应的stash 拿stash里的文件,{}{1}{2}是stash名称前的带的123git stashgit stash list //本地存储列表git stash apply stash@&#123;0&#125; //恢复上次0,1,2...存储 其它12345678910111213141516git checkout -- .//删除本地所有不提交改动git reset --hard //重置git clean -df //清掉所有修改git stash clear //清掉stashgit stash//暂存并隐藏本地未提交git stash pop//显示暂藏git pull = git fetch + git merge FETCH_HEAD git pull --rebase = git fetch + git rebase FETCH_HEAD 查看ssh-key: 1. cd ~/.ssh/2. ls3. vim id_rsa 或 code id_rsassh-keygen -t rsa -f github -C "" //生成ssh-key]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js判断设备]]></title>
    <url>%2F2015%2F05%2F03%2Fjs-get-operating-system%2F</url>
    <content type="text"><![CDATA[判断设备类型123456789101112131415161718192021222324function myBrowser() &#123; var userAgent = navigator.userAgent; if (userAgent.indexOf("Edge") &gt; -1 &amp;&amp; navigator.appVersion.indexOf('Edge') &gt; -1) &#123; return 'Edge'; &#125; else if (userAgent.indexOf("Opera") != -1 || userAgent.indexOf('OPR') != -1) &#123; return 'Opera'; &#125; else if (userAgent.indexOf("Chrome") != -1) &#123; return 'Chrome'; &#125; else if (userAgent.indexOf("Safari") != -1) &#123; return 'Safari'; &#125; else if (userAgent.indexOf("Firefox") != -1) &#123; return 'Firefox'; &#125; else if ((userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) &#123; return 'IE'; &#125; else &#123; return 'unknown'; &#125;&#125; if (myBrowser() == 'IE' || myBrowser() == 'Firefox') &#123; $(window).on('load resize', function () &#123; ...... &#125;) &#125;; 判断设备类型2015123456789101112131415161718192021222324252627282930313233343536373839404142function getMobileOperatingSystem() &#123; var userAgent = navigator.userAgent || navigator.vendor || window.opera; var ver = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/); if(userAgent.match(/SAMSUNG|SGH-[I|N|T]|GT-[I|P|N]|SM-[N|P|T|Z|G]|SHV-E|SCH-[I|J|R|S]|SPH-L/i)) &#123; return 'samsung'; &#125; else if (userAgent.match(/iPhone/i) || userAgent.match(/iPod/i)) &#123; ver = parseInt(ver[1], 10); if(ver &lt; 10)&#123; return 'ios ios9-below'; &#125; else &#123; return 'ios'; &#125; &#125; else if (userAgent.match(/iPad/i)) &#123; ver = parseInt(ver[1], 10); if(ver &lt; 10)&#123; return 'ios ipad ios9-below'; &#125;else &#123; return 'ios ipad'; &#125; &#125; else if (userAgent.match(/Android/i)) &#123; return 'android'; &#125; else if (userAgent.match(/FIREFOX/i)) &#123; return 'firefox no-touch'; &#125;else if (/MSIE 9/i.test(userAgent)) &#123; return 'ie9 no-touch'; &#125;else &#123; return 'unknown no-touch'; &#125;&#125;navigator.sayswho= (function()&#123; var ua= navigator.userAgent, tem, M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || []; M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?']; if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]); var str = M.join(' ') ; str = str.split(' '); if( str[0] == 'Safari' &amp;&amp; str[1] &lt; 10) &#123; return 'safari9-below'; &#125;&#125;); 12345678$(function()&#123; $('body').addClass(getMobileOperatingSystem()).addClass(navigator.sayswho()); //如果body有ios,同时屏幕宽度小于768px,就是苹果手机; if($('body').hasClass('ios') &amp;&amp; $(window).width() &lt; 768) &#123; ... &#125;&#125;);]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS获取当前页面页面URL信息]]></title>
    <url>%2F2014%2F11%2F03%2Fjs-get-url%2F</url>
    <content type="text"><![CDATA[js获取url指定参数值12345678910111213function GetQueryString(name) &#123; var reg = new RegExp("(^|&amp;)" + name + "=([^&amp;]*)(&amp;|$)"); var r = window.location.search.substr(1).match(reg); if (r != null) &#123; return unescape(r[2]) &#125; return null;&#125;假设url地址是http://www.xxx.com?ProID=100&amp;UserID=200，可用GetQueryString("ProID")或GetQueryString("UserID")获取相应参数值。 12345678910111213function getQueryString(name, str) &#123; var reg = new RegExp("(^|&amp;)" + name + "=([^&amp;]*)(&amp;|$)"); var r = str ? str.match(reg) : window.location.search.substr(1).match(reg); if (r != null) &#123; var res = unescape(r[2]); return res; &#125; return null; &#125; 假设url地址是http://www.xxx.com?ProID=100?200，要取200: r = href.split('?'), getQueryString('ProID', r[1]); 设置或获取对象指定的文件名或路径1234url = http://www.baidu.com/baidu/postedit/46887983?wd=hei+jude&amp;tn=monline_4_dgwindow.location.pathname;---&gt; "/baidu/postedit/46887983" 设置或获取整个 URL 为字符串1234url = http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dgwindow.location.href;---&gt; "http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dg" 设置或获取与 URL 关联的端口号码123url =http://192.168.14.97:2000/analytics/profiles/window.location.port;---&gt; "2000" 设置或获取 URL 的协议部分123url = http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dgwindow.location.protocol;---&gt; "http:" 设置或获取 href 属性中在井号“#”后面的分段123url = http://192.168.2.11/forum.php?mod=viewthread&amp;tid=65&amp;page=1&amp;extra=#pid207window.location.hash;---&gt; "#pid207" 设置或获取 location 或 URL 的 hostname 和 port 号码123url = http://192.168.14.97:2000/analytics/profiles/window.location.host;---&gt; "192.168.14.97:2000" 设置或获取 location 或 URL 的 hostname123url = http://192.168.14.97:2000/analytics/profiles/window.location.hostname;---&gt; "192.168.14.97" 设置或获取 href 属性中跟在问号后面的部分123456url = http://www.baidu.com/baidu?wd=hei+jude&amp;tn=monline_4_dgwindow.location.search;---&gt; "?wd=hei+jude&amp;tn=monline_4_dg"pathname.split('tn=')[1];---&gt; "monline_4_dg" 获取变量的值(截取等号后面的部分)12var url = window.location.search;var loc = url.substring(url.lastIndexOf('=')+1, url.length); iframe插入页面1window.location.replace("main.html");]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用的CSS2整理]]></title>
    <url>%2F2013%2F03%2F19%2FCSS2-finishing%2F</url>
    <content type="text"><![CDATA[一、上下左右居中1234567891011.box &#123; display: table; table-layout: fixed; //ie width: 100%; height: 100%; text-align:center;&#125;.box div &#123; display: table-cell; vertical-align: middle;&#125; 二、换行1. 强制不换行123div&#123; white-space:nowrap;&#125; 2. 自动换行1234div&#123; word-wrap: break-word; word-break: normal;&#125; 3. 强制英文单词断行123div&#123; word-break:break-all;&#125; 三、CSS文字效果1234567891011121314151617181920212223241. 文字一行显示，超出宽度用省略号代替:div &#123; overflow:hidden; display:inline-block; white-space:nowrap; text-overflow:ellipsis; width:130px;&#125;2. 小写的字变成大写,大写的字放大: font-variant: small-caps;3. 字斜的: font-style: italic;4. 首字母大写: text-transform:capitalize;5. 全大写: text-transform : uppercase;6. 全小写: text-transform:lowercase;7. 字上划线: text-decoration:overline;8. 字中划线: text-decoration:line-through;9. 字下划线: text-decoration:underline; 四、.cur图片替换鼠标默认指针123456789101112131415161718.box &#123; position:relative;&#125;.box a &#123; position:absolute; left:0px; height:50%; width:100%; background: url(_blank);&#125;.box a.previous &#123; top:0; cursor:url(images/pic/mouseup_is.cur),auto;&#125;.box a.next &#123; bottom:0; cursor:url(images/pic/mousedown_is.cur),auto;&#125; 五、div加滚动条显示内容1234567891011121314151617div&#123; overflow-y: auto; overflow: auto; width: 400px; height: 200px;&#125;滚动条加颜色：div &#123; scrollbar-arrow-color: #fff; scrollbar-face-color: #2073c1; scrollbar-darkshadow-color: #2073c1; scrollbar-highlight-color: #CDCDCD; scrollbar-shadow-color: #CDCDCD; scrollbar-track-color: #CDCDCD; scrollbar-3dlight-color: #2073c1;&#125; 六、高度等于外围的高度1. height=#div-id的高度：1height:expression(document.getElementById('div-id').offsetHeight+"px"); 2. height=body的高度：1height:expression(document.body.offsetHeight+ "px"); 七、鼠标经过有链接的图片改变透明度12345a:hover img&#123; -moz-opacity: 0.85; opacity: 0.85;filter: Alpha(Opacity=85);&#125;]]></content>
      <tags>
        <tag>CSS2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IE6 CSS]]></title>
    <url>%2F2012%2F01%2F19%2FCSS-ie6%2F</url>
    <content type="text"><![CDATA[IE6 高度等于外围的高度12height=#bpic的高度：height:expression(document.getElementById('bpic').offsetHeight+"px");height=body的高度：height:expression(document.body.offsetHeight+ "px"); IE6 图片最大宽度12max-width:695px;_width: expression(this.width &gt; 695 ? 695 : true); IE6 图片最小高度166px12min-height:166px;_height:expression((document.documentElement.clientHeight||document.body.clientHeight)&gt;166?"166px":""); IE6 高度=外围ID的高度(id=”case”)12height:100%;_height:expression(document.getElementById('case').offsetHeight+'px'); IE6 背景透明 png2412345.qq &#123; background:url(../images/pic/top.png) no-repeat; _filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='http://img0.bdstatic.com/static/widget/common/top/images/to-top_6744d50c0e.png');//ie6 _background:0 //ie6&#125; IE6 最小宽度1234.wrapper &#123; min-width:500px; _width:expression((document.documentElement.clientWidth||document.body.clientWidth) &lt; 500 ? "500px": "auto"); //ie6&#125; IE6 position:fixed1234567891011121314.gotop &#123; position:fixed; z-index:100; top:10px; right: 0px; _position:absolute;//ie6 _top:auto;//ie6 _top:expression(eval(document.documentElement.scrollTop)+10);//ie6&#125;*html &#123; background-image:url(about:blank);//ie6 background-attachment:fixed;//ie6&#125; IE6 fixed bottom的高度123456789101112.qq &#123; position:fixed; right:5px; bottom:100px; _position:absolute;//ie6 _bottom:auto;_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||100))); //ie6&#125;*html &#123; _background-image:url(about:blank); _background-attachment:scroll&#125;]]></content>
      <tags>
        <tag>CSS2</tag>
      </tags>
  </entry>
</search>
